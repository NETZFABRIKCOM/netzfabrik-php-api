<?php
/**
 * ZoneApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NETZFABRIK\ApiException;
use NETZFABRIK\Configuration;
use NETZFABRIK\HeaderSelector;
use NETZFABRIK\ObjectSerializer;

/**
 * ZoneApi Class Doc Comment
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ZoneApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDnsZone' => [
            'application/json',
            'text/html',
        ],
        'createDnsZoneRecord' => [
            'application/json',
            'text/html',
        ],
        'deleteDnsZone' => [
            'application/json',
        ],
        'disableDnssec' => [
            'application/json',
        ],
        'enableDnssec' => [
            'application/json',
            'text/html',
        ],
        'getDnsZone' => [
            'application/json',
        ],
        'getDnsZoneRecords' => [
            'application/json',
        ],
        'getDnsZones' => [
            'application/json',
        ],
        'getDnssec' => [
            'application/json',
        ],
        'updateDnsZone' => [
            'application/json',
            'text/html',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDnsZone
     *
     * Create a DNS zone
     *
     * @param  \NETZFABRIK\Model\ZoneZoneInputZoneCreateZoneRecordCreate $zoneZoneInputZoneCreateZoneRecordCreate The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneZoneReadZoneRecordRead
     */
    public function createDnsZone($zoneZoneInputZoneCreateZoneRecordCreate, string $contentType = self::contentTypes['createDnsZone'][0])
    {
        list($response) = $this->createDnsZoneWithHttpInfo($zoneZoneInputZoneCreateZoneRecordCreate, $contentType);
        return $response;
    }

    /**
     * Operation createDnsZoneWithHttpInfo
     *
     * Create a DNS zone
     *
     * @param  \NETZFABRIK\Model\ZoneZoneInputZoneCreateZoneRecordCreate $zoneZoneInputZoneCreateZoneRecordCreate The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneZoneReadZoneRecordRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDnsZoneWithHttpInfo($zoneZoneInputZoneCreateZoneRecordCreate, string $contentType = self::contentTypes['createDnsZone'][0])
    {
        $request = $this->createDnsZoneRequest($zoneZoneInputZoneCreateZoneRecordCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDnsZoneAsync
     *
     * Create a DNS zone
     *
     * @param  \NETZFABRIK\Model\ZoneZoneInputZoneCreateZoneRecordCreate $zoneZoneInputZoneCreateZoneRecordCreate The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDnsZoneAsync($zoneZoneInputZoneCreateZoneRecordCreate, string $contentType = self::contentTypes['createDnsZone'][0])
    {
        return $this->createDnsZoneAsyncWithHttpInfo($zoneZoneInputZoneCreateZoneRecordCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDnsZoneAsyncWithHttpInfo
     *
     * Create a DNS zone
     *
     * @param  \NETZFABRIK\Model\ZoneZoneInputZoneCreateZoneRecordCreate $zoneZoneInputZoneCreateZoneRecordCreate The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDnsZoneAsyncWithHttpInfo($zoneZoneInputZoneCreateZoneRecordCreate, string $contentType = self::contentTypes['createDnsZone'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneZoneReadZoneRecordRead';
        $request = $this->createDnsZoneRequest($zoneZoneInputZoneCreateZoneRecordCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDnsZone'
     *
     * @param  \NETZFABRIK\Model\ZoneZoneInputZoneCreateZoneRecordCreate $zoneZoneInputZoneCreateZoneRecordCreate The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDnsZoneRequest($zoneZoneInputZoneCreateZoneRecordCreate, string $contentType = self::contentTypes['createDnsZone'][0])
    {

        // verify the required parameter 'zoneZoneInputZoneCreateZoneRecordCreate' is set
        if ($zoneZoneInputZoneCreateZoneRecordCreate === null || (is_array($zoneZoneInputZoneCreateZoneRecordCreate) && count($zoneZoneInputZoneCreateZoneRecordCreate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneZoneInputZoneCreateZoneRecordCreate when calling createDnsZone'
            );
        }


        $resourcePath = '/dns/zones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zoneZoneInputZoneCreateZoneRecordCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($zoneZoneInputZoneCreateZoneRecordCreate));
            } else {
                $httpBody = $zoneZoneInputZoneCreateZoneRecordCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDnsZoneRecord
     *
     * Create a DNS record
     *
     * @param  string $id ZoneRecord identifier (required)
     * @param  \NETZFABRIK\Model\ZoneRecordZoneRecordInputZoneRecordCreate $zoneRecordZoneRecordInputZoneRecordCreate The new ZoneRecord resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZoneRecord'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneRecordZoneRecordRead
     */
    public function createDnsZoneRecord($id, $zoneRecordZoneRecordInputZoneRecordCreate, string $contentType = self::contentTypes['createDnsZoneRecord'][0])
    {
        list($response) = $this->createDnsZoneRecordWithHttpInfo($id, $zoneRecordZoneRecordInputZoneRecordCreate, $contentType);
        return $response;
    }

    /**
     * Operation createDnsZoneRecordWithHttpInfo
     *
     * Create a DNS record
     *
     * @param  string $id ZoneRecord identifier (required)
     * @param  \NETZFABRIK\Model\ZoneRecordZoneRecordInputZoneRecordCreate $zoneRecordZoneRecordInputZoneRecordCreate The new ZoneRecord resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZoneRecord'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneRecordZoneRecordRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDnsZoneRecordWithHttpInfo($id, $zoneRecordZoneRecordInputZoneRecordCreate, string $contentType = self::contentTypes['createDnsZoneRecord'][0])
    {
        $request = $this->createDnsZoneRecordRequest($id, $zoneRecordZoneRecordInputZoneRecordCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\ZoneRecordZoneRecordRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneRecordZoneRecordRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneRecordZoneRecordRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneRecordZoneRecordRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneRecordZoneRecordRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDnsZoneRecordAsync
     *
     * Create a DNS record
     *
     * @param  string $id ZoneRecord identifier (required)
     * @param  \NETZFABRIK\Model\ZoneRecordZoneRecordInputZoneRecordCreate $zoneRecordZoneRecordInputZoneRecordCreate The new ZoneRecord resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZoneRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDnsZoneRecordAsync($id, $zoneRecordZoneRecordInputZoneRecordCreate, string $contentType = self::contentTypes['createDnsZoneRecord'][0])
    {
        return $this->createDnsZoneRecordAsyncWithHttpInfo($id, $zoneRecordZoneRecordInputZoneRecordCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDnsZoneRecordAsyncWithHttpInfo
     *
     * Create a DNS record
     *
     * @param  string $id ZoneRecord identifier (required)
     * @param  \NETZFABRIK\Model\ZoneRecordZoneRecordInputZoneRecordCreate $zoneRecordZoneRecordInputZoneRecordCreate The new ZoneRecord resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZoneRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDnsZoneRecordAsyncWithHttpInfo($id, $zoneRecordZoneRecordInputZoneRecordCreate, string $contentType = self::contentTypes['createDnsZoneRecord'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneRecordZoneRecordRead';
        $request = $this->createDnsZoneRecordRequest($id, $zoneRecordZoneRecordInputZoneRecordCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDnsZoneRecord'
     *
     * @param  string $id ZoneRecord identifier (required)
     * @param  \NETZFABRIK\Model\ZoneRecordZoneRecordInputZoneRecordCreate $zoneRecordZoneRecordInputZoneRecordCreate The new ZoneRecord resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDnsZoneRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDnsZoneRecordRequest($id, $zoneRecordZoneRecordInputZoneRecordCreate, string $contentType = self::contentTypes['createDnsZoneRecord'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createDnsZoneRecord'
            );
        }

        // verify the required parameter 'zoneRecordZoneRecordInputZoneRecordCreate' is set
        if ($zoneRecordZoneRecordInputZoneRecordCreate === null || (is_array($zoneRecordZoneRecordInputZoneRecordCreate) && count($zoneRecordZoneRecordInputZoneRecordCreate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneRecordZoneRecordInputZoneRecordCreate when calling createDnsZoneRecord'
            );
        }


        $resourcePath = '/dns/zones/{id}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zoneRecordZoneRecordInputZoneRecordCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($zoneRecordZoneRecordInputZoneRecordCreate));
            } else {
                $httpBody = $zoneRecordZoneRecordInputZoneRecordCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDnsZone
     *
     * Delete a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDnsZone($id, string $contentType = self::contentTypes['deleteDnsZone'][0])
    {
        $this->deleteDnsZoneWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteDnsZoneWithHttpInfo
     *
     * Delete a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDnsZoneWithHttpInfo($id, string $contentType = self::contentTypes['deleteDnsZone'][0])
    {
        $request = $this->deleteDnsZoneRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDnsZoneAsync
     *
     * Delete a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnsZoneAsync($id, string $contentType = self::contentTypes['deleteDnsZone'][0])
    {
        return $this->deleteDnsZoneAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDnsZoneAsyncWithHttpInfo
     *
     * Delete a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnsZoneAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteDnsZone'][0])
    {
        $returnType = '';
        $request = $this->deleteDnsZoneRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDnsZone'
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDnsZoneRequest($id, string $contentType = self::contentTypes['deleteDnsZone'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDnsZone'
            );
        }


        $resourcePath = '/dns/zones/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableDnssec
     *
     * Disable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function disableDnssec($id, string $contentType = self::contentTypes['disableDnssec'][0])
    {
        $this->disableDnssecWithHttpInfo($id, $contentType);
    }

    /**
     * Operation disableDnssecWithHttpInfo
     *
     * Disable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableDnssecWithHttpInfo($id, string $contentType = self::contentTypes['disableDnssec'][0])
    {
        $request = $this->disableDnssecRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation disableDnssecAsync
     *
     * Disable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableDnssecAsync($id, string $contentType = self::contentTypes['disableDnssec'][0])
    {
        return $this->disableDnssecAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableDnssecAsyncWithHttpInfo
     *
     * Disable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableDnssecAsyncWithHttpInfo($id, string $contentType = self::contentTypes['disableDnssec'][0])
    {
        $returnType = '';
        $request = $this->disableDnssecRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableDnssec'
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableDnssecRequest($id, string $contentType = self::contentTypes['disableDnssec'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling disableDnssec'
            );
        }


        $resourcePath = '/dns/zones/{id}/dnssec';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enableDnssec
     *
     * Enable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  mixed $body The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function enableDnssec($id, $body, string $contentType = self::contentTypes['enableDnssec'][0])
    {
        list($response) = $this->enableDnssecWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation enableDnssecWithHttpInfo
     *
     * Enable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  mixed $body The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableDnssecWithHttpInfo($id, $body, string $contentType = self::contentTypes['enableDnssec'][0])
    {
        $request = $this->enableDnssecRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enableDnssecAsync
     *
     * Enable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  mixed $body The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableDnssecAsync($id, $body, string $contentType = self::contentTypes['enableDnssec'][0])
    {
        return $this->enableDnssecAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enableDnssecAsyncWithHttpInfo
     *
     * Enable DNSSEC
     *
     * @param  string $id Zone identifier (required)
     * @param  mixed $body The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableDnssecAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['enableDnssec'][0])
    {
        $returnType = 'mixed';
        $request = $this->enableDnssecRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enableDnssec'
     *
     * @param  string $id Zone identifier (required)
     * @param  mixed $body The new Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enableDnssecRequest($id, $body, string $contentType = self::contentTypes['enableDnssec'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling enableDnssec'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling enableDnssec'
            );
        }


        $resourcePath = '/dns/zones/{id}/dnssec';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnsZone
     *
     * Get a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead
     */
    public function getDnsZone($id, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        list($response) = $this->getDnsZoneWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDnsZoneWithHttpInfo
     *
     * Get a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnsZoneWithHttpInfo($id, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        $request = $this->getDnsZoneRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnsZoneAsync
     *
     * Get a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneAsync($id, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        return $this->getDnsZoneAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnsZoneAsyncWithHttpInfo
     *
     * Get a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneZoneReadZoneListZoneRecordRead';
        $request = $this->getDnsZoneRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnsZone'
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDnsZoneRequest($id, string $contentType = self::contentTypes['getDnsZone'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDnsZone'
            );
        }


        $resourcePath = '/dns/zones/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnsZoneRecords
     *
     * Get a collection of DNS records
     *
     * @param  string $id Zone identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZoneRecords'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneRecordZoneRecordRead[]
     */
    public function getDnsZoneRecords($id, $page = 1, string $contentType = self::contentTypes['getDnsZoneRecords'][0])
    {
        list($response) = $this->getDnsZoneRecordsWithHttpInfo($id, $page, $contentType);
        return $response;
    }

    /**
     * Operation getDnsZoneRecordsWithHttpInfo
     *
     * Get a collection of DNS records
     *
     * @param  string $id Zone identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZoneRecords'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneRecordZoneRecordRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnsZoneRecordsWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['getDnsZoneRecords'][0])
    {
        $request = $this->getDnsZoneRecordsRequest($id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnsZoneRecordsAsync
     *
     * Get a collection of DNS records
     *
     * @param  string $id Zone identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZoneRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneRecordsAsync($id, $page = 1, string $contentType = self::contentTypes['getDnsZoneRecords'][0])
    {
        return $this->getDnsZoneRecordsAsyncWithHttpInfo($id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnsZoneRecordsAsyncWithHttpInfo
     *
     * Get a collection of DNS records
     *
     * @param  string $id Zone identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZoneRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneRecordsAsyncWithHttpInfo($id, $page = 1, string $contentType = self::contentTypes['getDnsZoneRecords'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneRecordZoneRecordRead[]';
        $request = $this->getDnsZoneRecordsRequest($id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnsZoneRecords'
     *
     * @param  string $id Zone identifier (required)
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZoneRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDnsZoneRecordsRequest($id, $page = 1, string $contentType = self::contentTypes['getDnsZoneRecords'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDnsZoneRecords'
            );
        }



        $resourcePath = '/dns/zones/{id}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnsZones
     *
     * Get a collection of DNS zones
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZones'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneZoneList[]
     */
    public function getDnsZones($page = 1, string $contentType = self::contentTypes['getDnsZones'][0])
    {
        list($response) = $this->getDnsZonesWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation getDnsZonesWithHttpInfo
     *
     * Get a collection of DNS zones
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZones'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneZoneList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnsZonesWithHttpInfo($page = 1, string $contentType = self::contentTypes['getDnsZones'][0])
    {
        $request = $this->getDnsZonesRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ZoneZoneList[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneZoneList[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneZoneList[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneZoneList[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneZoneList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnsZonesAsync
     *
     * Get a collection of DNS zones
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZonesAsync($page = 1, string $contentType = self::contentTypes['getDnsZones'][0])
    {
        return $this->getDnsZonesAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnsZonesAsyncWithHttpInfo
     *
     * Get a collection of DNS zones
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZonesAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['getDnsZones'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneZoneList[]';
        $request = $this->getDnsZonesRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnsZones'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDnsZonesRequest($page = 1, string $contentType = self::contentTypes['getDnsZones'][0])
    {



        $resourcePath = '/dns/zones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnssec
     *
     * Get DNSSEC keys
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec
     */
    public function getDnssec($id, string $contentType = self::contentTypes['getDnssec'][0])
    {
        list($response) = $this->getDnssecWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDnssecWithHttpInfo
     *
     * Get DNSSEC keys
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnssec'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnssecWithHttpInfo($id, string $contentType = self::contentTypes['getDnssec'][0])
    {
        $request = $this->getDnssecRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDnssecAsync
     *
     * Get DNSSEC keys
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnssecAsync($id, string $contentType = self::contentTypes['getDnssec'][0])
    {
        return $this->getDnssecAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnssecAsyncWithHttpInfo
     *
     * Get DNSSEC keys
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnssecAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDnssec'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneDnssecInfoZoneDnssec';
        $request = $this->getDnssecRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnssec'
     *
     * @param  string $id Zone identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnssec'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDnssecRequest($id, string $contentType = self::contentTypes['getDnssec'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDnssec'
            );
        }


        $resourcePath = '/dns/zones/{id}/dnssec';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDnsZone
     *
     * Update a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  \NETZFABRIK\Model\ZoneZoneUpdateZoneRecordUpdate $zoneZoneUpdateZoneRecordUpdate The updated Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ZoneZoneListZoneRead
     */
    public function updateDnsZone($id, $zoneZoneUpdateZoneRecordUpdate, string $contentType = self::contentTypes['updateDnsZone'][0])
    {
        list($response) = $this->updateDnsZoneWithHttpInfo($id, $zoneZoneUpdateZoneRecordUpdate, $contentType);
        return $response;
    }

    /**
     * Operation updateDnsZoneWithHttpInfo
     *
     * Update a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  \NETZFABRIK\Model\ZoneZoneUpdateZoneRecordUpdate $zoneZoneUpdateZoneRecordUpdate The updated Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsZone'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ZoneZoneListZoneRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDnsZoneWithHttpInfo($id, $zoneZoneUpdateZoneRecordUpdate, string $contentType = self::contentTypes['updateDnsZone'][0])
    {
        $request = $this->updateDnsZoneRequest($id, $zoneZoneUpdateZoneRecordUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ZoneZoneListZoneRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ZoneZoneListZoneRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ZoneZoneListZoneRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ZoneZoneListZoneRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ZoneZoneListZoneRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDnsZoneAsync
     *
     * Update a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  \NETZFABRIK\Model\ZoneZoneUpdateZoneRecordUpdate $zoneZoneUpdateZoneRecordUpdate The updated Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDnsZoneAsync($id, $zoneZoneUpdateZoneRecordUpdate, string $contentType = self::contentTypes['updateDnsZone'][0])
    {
        return $this->updateDnsZoneAsyncWithHttpInfo($id, $zoneZoneUpdateZoneRecordUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDnsZoneAsyncWithHttpInfo
     *
     * Update a DNS zone
     *
     * @param  string $id Zone identifier (required)
     * @param  \NETZFABRIK\Model\ZoneZoneUpdateZoneRecordUpdate $zoneZoneUpdateZoneRecordUpdate The updated Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDnsZoneAsyncWithHttpInfo($id, $zoneZoneUpdateZoneRecordUpdate, string $contentType = self::contentTypes['updateDnsZone'][0])
    {
        $returnType = '\NETZFABRIK\Model\ZoneZoneListZoneRead';
        $request = $this->updateDnsZoneRequest($id, $zoneZoneUpdateZoneRecordUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDnsZone'
     *
     * @param  string $id Zone identifier (required)
     * @param  \NETZFABRIK\Model\ZoneZoneUpdateZoneRecordUpdate $zoneZoneUpdateZoneRecordUpdate The updated Zone resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDnsZoneRequest($id, $zoneZoneUpdateZoneRecordUpdate, string $contentType = self::contentTypes['updateDnsZone'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateDnsZone'
            );
        }

        // verify the required parameter 'zoneZoneUpdateZoneRecordUpdate' is set
        if ($zoneZoneUpdateZoneRecordUpdate === null || (is_array($zoneZoneUpdateZoneRecordUpdate) && count($zoneZoneUpdateZoneRecordUpdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneZoneUpdateZoneRecordUpdate when calling updateDnsZone'
            );
        }


        $resourcePath = '/dns/zones/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zoneZoneUpdateZoneRecordUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($zoneZoneUpdateZoneRecordUpdate));
            } else {
                $httpBody = $zoneZoneUpdateZoneRecordUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
