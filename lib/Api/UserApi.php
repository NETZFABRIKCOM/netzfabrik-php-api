<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NETZFABRIK\ApiException;
use NETZFABRIK\Configuration;
use NETZFABRIK\HeaderSelector;
use NETZFABRIK\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'completeUser' => [
            'application/json',
            'text/html',
        ],
        'createApiToken' => [
            'application/json',
            'text/html',
        ],
        'deleteApiToken' => [
            'application/json',
        ],
        'getApiTokens' => [
            'application/json',
        ],
        'getLoginActivities' => [
            'application/json',
        ],
        'getMe' => [
            'application/json',
        ],
        'getUserCustomers' => [
            'application/json',
        ],
        'recoverPassword' => [
            'application/json',
            'text/html',
        ],
        'registerUser' => [
            'application/json',
            'text/html',
        ],
        'requestPasswordRecovery' => [
            'application/json',
            'text/html',
        ],
        'setDefaultCustomer' => [
            'application/json',
            'text/html',
        ],
        'testPasswordRecovery' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation completeUser
     *
     * Complete the user registration
     *
     * @param  \NETZFABRIK\Model\UserCompleteUserRequestUserComplete $userCompleteUserRequestUserComplete The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUser'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\User
     */
    public function completeUser($userCompleteUserRequestUserComplete, string $contentType = self::contentTypes['completeUser'][0])
    {
        list($response) = $this->completeUserWithHttpInfo($userCompleteUserRequestUserComplete, $contentType);
        return $response;
    }

    /**
     * Operation completeUserWithHttpInfo
     *
     * Complete the user registration
     *
     * @param  \NETZFABRIK\Model\UserCompleteUserRequestUserComplete $userCompleteUserRequestUserComplete The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUser'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeUserWithHttpInfo($userCompleteUserRequestUserComplete, string $contentType = self::contentTypes['completeUser'][0])
    {
        $request = $this->completeUserRequest($userCompleteUserRequestUserComplete, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\User' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completeUserAsync
     *
     * Complete the user registration
     *
     * @param  \NETZFABRIK\Model\UserCompleteUserRequestUserComplete $userCompleteUserRequestUserComplete The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeUserAsync($userCompleteUserRequestUserComplete, string $contentType = self::contentTypes['completeUser'][0])
    {
        return $this->completeUserAsyncWithHttpInfo($userCompleteUserRequestUserComplete, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeUserAsyncWithHttpInfo
     *
     * Complete the user registration
     *
     * @param  \NETZFABRIK\Model\UserCompleteUserRequestUserComplete $userCompleteUserRequestUserComplete The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeUserAsyncWithHttpInfo($userCompleteUserRequestUserComplete, string $contentType = self::contentTypes['completeUser'][0])
    {
        $returnType = '\NETZFABRIK\Model\User';
        $request = $this->completeUserRequest($userCompleteUserRequestUserComplete, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeUser'
     *
     * @param  \NETZFABRIK\Model\UserCompleteUserRequestUserComplete $userCompleteUserRequestUserComplete The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completeUserRequest($userCompleteUserRequestUserComplete, string $contentType = self::contentTypes['completeUser'][0])
    {

        // verify the required parameter 'userCompleteUserRequestUserComplete' is set
        if ($userCompleteUserRequestUserComplete === null || (is_array($userCompleteUserRequestUserComplete) && count($userCompleteUserRequestUserComplete) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userCompleteUserRequestUserComplete when calling completeUser'
            );
        }


        $resourcePath = '/user/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userCompleteUserRequestUserComplete)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userCompleteUserRequestUserComplete));
            } else {
                $httpBody = $userCompleteUserRequestUserComplete;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createApiToken
     *
     * Creates a ApiToken resource.
     *
     * @param  \NETZFABRIK\Model\ApiTokenCreateApiTokenRequest $apiTokenCreateApiTokenRequest The new ApiToken resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createApiToken'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse
     */
    public function createApiToken($apiTokenCreateApiTokenRequest, string $contentType = self::contentTypes['createApiToken'][0])
    {
        list($response) = $this->createApiTokenWithHttpInfo($apiTokenCreateApiTokenRequest, $contentType);
        return $response;
    }

    /**
     * Operation createApiTokenWithHttpInfo
     *
     * Creates a ApiToken resource.
     *
     * @param  \NETZFABRIK\Model\ApiTokenCreateApiTokenRequest $apiTokenCreateApiTokenRequest The new ApiToken resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createApiToken'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createApiTokenWithHttpInfo($apiTokenCreateApiTokenRequest, string $contentType = self::contentTypes['createApiToken'][0])
    {
        $request = $this->createApiTokenRequest($apiTokenCreateApiTokenRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createApiTokenAsync
     *
     * Creates a ApiToken resource.
     *
     * @param  \NETZFABRIK\Model\ApiTokenCreateApiTokenRequest $apiTokenCreateApiTokenRequest The new ApiToken resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createApiTokenAsync($apiTokenCreateApiTokenRequest, string $contentType = self::contentTypes['createApiToken'][0])
    {
        return $this->createApiTokenAsyncWithHttpInfo($apiTokenCreateApiTokenRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createApiTokenAsyncWithHttpInfo
     *
     * Creates a ApiToken resource.
     *
     * @param  \NETZFABRIK\Model\ApiTokenCreateApiTokenRequest $apiTokenCreateApiTokenRequest The new ApiToken resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createApiTokenAsyncWithHttpInfo($apiTokenCreateApiTokenRequest, string $contentType = self::contentTypes['createApiToken'][0])
    {
        $returnType = '\NETZFABRIK\Model\ApiTokenApiTokenCreatedResponse';
        $request = $this->createApiTokenRequest($apiTokenCreateApiTokenRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createApiToken'
     *
     * @param  \NETZFABRIK\Model\ApiTokenCreateApiTokenRequest $apiTokenCreateApiTokenRequest The new ApiToken resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createApiTokenRequest($apiTokenCreateApiTokenRequest, string $contentType = self::contentTypes['createApiToken'][0])
    {

        // verify the required parameter 'apiTokenCreateApiTokenRequest' is set
        if ($apiTokenCreateApiTokenRequest === null || (is_array($apiTokenCreateApiTokenRequest) && count($apiTokenCreateApiTokenRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apiTokenCreateApiTokenRequest when calling createApiToken'
            );
        }


        $resourcePath = '/user/api-tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apiTokenCreateApiTokenRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apiTokenCreateApiTokenRequest));
            } else {
                $httpBody = $apiTokenCreateApiTokenRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApiToken
     *
     * Removes the ApiToken resource.
     *
     * @param  string $id ApiToken identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApiToken'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteApiToken($id, string $contentType = self::contentTypes['deleteApiToken'][0])
    {
        $this->deleteApiTokenWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteApiTokenWithHttpInfo
     *
     * Removes the ApiToken resource.
     *
     * @param  string $id ApiToken identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApiToken'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiTokenWithHttpInfo($id, string $contentType = self::contentTypes['deleteApiToken'][0])
    {
        $request = $this->deleteApiTokenRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiTokenAsync
     *
     * Removes the ApiToken resource.
     *
     * @param  string $id ApiToken identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiTokenAsync($id, string $contentType = self::contentTypes['deleteApiToken'][0])
    {
        return $this->deleteApiTokenAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiTokenAsyncWithHttpInfo
     *
     * Removes the ApiToken resource.
     *
     * @param  string $id ApiToken identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiTokenAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteApiToken'][0])
    {
        $returnType = '';
        $request = $this->deleteApiTokenRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiToken'
     *
     * @param  string $id ApiToken identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApiToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiTokenRequest($id, string $contentType = self::contentTypes['deleteApiToken'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteApiToken'
            );
        }


        $resourcePath = '/user/api-tokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiTokens
     *
     * Retrieves the collection of ApiToken resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiTokens'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]
     */
    public function getApiTokens($page = 1, string $contentType = self::contentTypes['getApiTokens'][0])
    {
        list($response) = $this->getApiTokensWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation getApiTokensWithHttpInfo
     *
     * Retrieves the collection of ApiToken resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiTokens'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiTokensWithHttpInfo($page = 1, string $contentType = self::contentTypes['getApiTokens'][0])
    {
        $request = $this->getApiTokensRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiTokensAsync
     *
     * Retrieves the collection of ApiToken resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiTokensAsync($page = 1, string $contentType = self::contentTypes['getApiTokens'][0])
    {
        return $this->getApiTokensAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiTokensAsyncWithHttpInfo
     *
     * Retrieves the collection of ApiToken resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiTokensAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['getApiTokens'][0])
    {
        $returnType = '\NETZFABRIK\Model\ApiTokenApiTokenReadTimestampableCreatedAtReadTimestampableUpdatedAtRead[]';
        $request = $this->getApiTokensRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiTokens'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiTokensRequest($page = 1, string $contentType = self::contentTypes['getApiTokens'][0])
    {



        $resourcePath = '/user/api-tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoginActivities
     *
     * Retrieves the collection of LoginActivity resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderLoginAt  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginActivities'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\LoginActivity[]
     */
    public function getLoginActivities($page = 1, $orderLoginAt = null, string $contentType = self::contentTypes['getLoginActivities'][0])
    {
        list($response) = $this->getLoginActivitiesWithHttpInfo($page, $orderLoginAt, $contentType);
        return $response;
    }

    /**
     * Operation getLoginActivitiesWithHttpInfo
     *
     * Retrieves the collection of LoginActivity resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderLoginAt  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginActivities'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\LoginActivity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginActivitiesWithHttpInfo($page = 1, $orderLoginAt = null, string $contentType = self::contentTypes['getLoginActivities'][0])
    {
        $request = $this->getLoginActivitiesRequest($page, $orderLoginAt, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\LoginActivity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\LoginActivity[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\LoginActivity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\LoginActivity[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\LoginActivity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoginActivitiesAsync
     *
     * Retrieves the collection of LoginActivity resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderLoginAt  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginActivities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginActivitiesAsync($page = 1, $orderLoginAt = null, string $contentType = self::contentTypes['getLoginActivities'][0])
    {
        return $this->getLoginActivitiesAsyncWithHttpInfo($page, $orderLoginAt, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoginActivitiesAsyncWithHttpInfo
     *
     * Retrieves the collection of LoginActivity resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderLoginAt  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginActivities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginActivitiesAsyncWithHttpInfo($page = 1, $orderLoginAt = null, string $contentType = self::contentTypes['getLoginActivities'][0])
    {
        $returnType = '\NETZFABRIK\Model\LoginActivity[]';
        $request = $this->getLoginActivitiesRequest($page, $orderLoginAt, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoginActivities'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $orderLoginAt  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginActivities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoginActivitiesRequest($page = 1, $orderLoginAt = null, string $contentType = self::contentTypes['getLoginActivities'][0])
    {




        $resourcePath = '/user/login-activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderLoginAt,
            'order[loginAt]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMe
     *
     * Get the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMe'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe
     */
    public function getMe(string $contentType = self::contentTypes['getMe'][0])
    {
        list($response) = $this->getMeWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getMeWithHttpInfo
     *
     * Get the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMe'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMeWithHttpInfo(string $contentType = self::contentTypes['getMe'][0])
    {
        $request = $this->getMeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMeAsync
     *
     * Get the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeAsync(string $contentType = self::contentTypes['getMe'][0])
    {
        return $this->getMeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMeAsyncWithHttpInfo
     *
     * Get the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMeAsyncWithHttpInfo(string $contentType = self::contentTypes['getMe'][0])
    {
        $returnType = '\NETZFABRIK\Model\UserUserMeResponseUserReadUserMeReadAccountMeCustomerMe';
        $request = $this->getMeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMe'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMeRequest(string $contentType = self::contentTypes['getMe'][0])
    {


        $resourcePath = '/user/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserCustomers
     *
     * Get the customers of the current user
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserCustomers'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\UserCustomer[]
     */
    public function getUserCustomers($page = 1, string $contentType = self::contentTypes['getUserCustomers'][0])
    {
        list($response) = $this->getUserCustomersWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation getUserCustomersWithHttpInfo
     *
     * Get the customers of the current user
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserCustomers'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\UserCustomer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserCustomersWithHttpInfo($page = 1, string $contentType = self::contentTypes['getUserCustomers'][0])
    {
        $request = $this->getUserCustomersRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\UserCustomer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\UserCustomer[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\UserCustomer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\UserCustomer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\UserCustomer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserCustomersAsync
     *
     * Get the customers of the current user
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserCustomers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserCustomersAsync($page = 1, string $contentType = self::contentTypes['getUserCustomers'][0])
    {
        return $this->getUserCustomersAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserCustomersAsyncWithHttpInfo
     *
     * Get the customers of the current user
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserCustomers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserCustomersAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['getUserCustomers'][0])
    {
        $returnType = '\NETZFABRIK\Model\UserCustomer[]';
        $request = $this->getUserCustomersRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserCustomers'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserCustomers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserCustomersRequest($page = 1, string $contentType = self::contentTypes['getUserCustomers'][0])
    {



        $resourcePath = '/user/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recoverPassword
     *
     * Recover the password
     *
     * @param  string $id User identifier (required)
     * @param  \NETZFABRIK\Model\UserChangePasswordRequestDefault $userChangePasswordRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverPassword'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recoverPassword($id, $userChangePasswordRequestDefault, string $contentType = self::contentTypes['recoverPassword'][0])
    {
        $this->recoverPasswordWithHttpInfo($id, $userChangePasswordRequestDefault, $contentType);
    }

    /**
     * Operation recoverPasswordWithHttpInfo
     *
     * Recover the password
     *
     * @param  string $id User identifier (required)
     * @param  \NETZFABRIK\Model\UserChangePasswordRequestDefault $userChangePasswordRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverPassword'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recoverPasswordWithHttpInfo($id, $userChangePasswordRequestDefault, string $contentType = self::contentTypes['recoverPassword'][0])
    {
        $request = $this->recoverPasswordRequest($id, $userChangePasswordRequestDefault, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation recoverPasswordAsync
     *
     * Recover the password
     *
     * @param  string $id User identifier (required)
     * @param  \NETZFABRIK\Model\UserChangePasswordRequestDefault $userChangePasswordRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoverPasswordAsync($id, $userChangePasswordRequestDefault, string $contentType = self::contentTypes['recoverPassword'][0])
    {
        return $this->recoverPasswordAsyncWithHttpInfo($id, $userChangePasswordRequestDefault, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recoverPasswordAsyncWithHttpInfo
     *
     * Recover the password
     *
     * @param  string $id User identifier (required)
     * @param  \NETZFABRIK\Model\UserChangePasswordRequestDefault $userChangePasswordRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoverPasswordAsyncWithHttpInfo($id, $userChangePasswordRequestDefault, string $contentType = self::contentTypes['recoverPassword'][0])
    {
        $returnType = '';
        $request = $this->recoverPasswordRequest($id, $userChangePasswordRequestDefault, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recoverPassword'
     *
     * @param  string $id User identifier (required)
     * @param  \NETZFABRIK\Model\UserChangePasswordRequestDefault $userChangePasswordRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recoverPasswordRequest($id, $userChangePasswordRequestDefault, string $contentType = self::contentTypes['recoverPassword'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling recoverPassword'
            );
        }

        // verify the required parameter 'userChangePasswordRequestDefault' is set
        if ($userChangePasswordRequestDefault === null || (is_array($userChangePasswordRequestDefault) && count($userChangePasswordRequestDefault) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userChangePasswordRequestDefault when calling recoverPassword'
            );
        }


        $resourcePath = '/auth/recover-password/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userChangePasswordRequestDefault)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userChangePasswordRequestDefault));
            } else {
                $httpBody = $userChangePasswordRequestDefault;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerUser
     *
     * Register a new user
     *
     * @param  \NETZFABRIK\Model\UserRegisterUserRequestUserRegister $userRegisterUserRequestUserRegister The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerUser'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\User
     */
    public function registerUser($userRegisterUserRequestUserRegister, string $contentType = self::contentTypes['registerUser'][0])
    {
        list($response) = $this->registerUserWithHttpInfo($userRegisterUserRequestUserRegister, $contentType);
        return $response;
    }

    /**
     * Operation registerUserWithHttpInfo
     *
     * Register a new user
     *
     * @param  \NETZFABRIK\Model\UserRegisterUserRequestUserRegister $userRegisterUserRequestUserRegister The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerUser'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerUserWithHttpInfo($userRegisterUserRequestUserRegister, string $contentType = self::contentTypes['registerUser'][0])
    {
        $request = $this->registerUserRequest($userRegisterUserRequestUserRegister, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\User' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerUserAsync
     *
     * Register a new user
     *
     * @param  \NETZFABRIK\Model\UserRegisterUserRequestUserRegister $userRegisterUserRequestUserRegister The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerUserAsync($userRegisterUserRequestUserRegister, string $contentType = self::contentTypes['registerUser'][0])
    {
        return $this->registerUserAsyncWithHttpInfo($userRegisterUserRequestUserRegister, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerUserAsyncWithHttpInfo
     *
     * Register a new user
     *
     * @param  \NETZFABRIK\Model\UserRegisterUserRequestUserRegister $userRegisterUserRequestUserRegister The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerUserAsyncWithHttpInfo($userRegisterUserRequestUserRegister, string $contentType = self::contentTypes['registerUser'][0])
    {
        $returnType = '\NETZFABRIK\Model\User';
        $request = $this->registerUserRequest($userRegisterUserRequestUserRegister, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerUser'
     *
     * @param  \NETZFABRIK\Model\UserRegisterUserRequestUserRegister $userRegisterUserRequestUserRegister The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerUserRequest($userRegisterUserRequestUserRegister, string $contentType = self::contentTypes['registerUser'][0])
    {

        // verify the required parameter 'userRegisterUserRequestUserRegister' is set
        if ($userRegisterUserRequestUserRegister === null || (is_array($userRegisterUserRequestUserRegister) && count($userRegisterUserRequestUserRegister) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userRegisterUserRequestUserRegister when calling registerUser'
            );
        }


        $resourcePath = '/auth/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userRegisterUserRequestUserRegister)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userRegisterUserRequestUserRegister));
            } else {
                $httpBody = $userRegisterUserRequestUserRegister;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestPasswordRecovery
     *
     * Request a password recovery
     *
     * @param  \NETZFABRIK\Model\UserRequestPasswordRecoveryRequestDefault $userRequestPasswordRecoveryRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function requestPasswordRecovery($userRequestPasswordRecoveryRequestDefault, string $contentType = self::contentTypes['requestPasswordRecovery'][0])
    {
        $this->requestPasswordRecoveryWithHttpInfo($userRequestPasswordRecoveryRequestDefault, $contentType);
    }

    /**
     * Operation requestPasswordRecoveryWithHttpInfo
     *
     * Request a password recovery
     *
     * @param  \NETZFABRIK\Model\UserRequestPasswordRecoveryRequestDefault $userRequestPasswordRecoveryRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestPasswordRecoveryWithHttpInfo($userRequestPasswordRecoveryRequestDefault, string $contentType = self::contentTypes['requestPasswordRecovery'][0])
    {
        $request = $this->requestPasswordRecoveryRequest($userRequestPasswordRecoveryRequestDefault, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation requestPasswordRecoveryAsync
     *
     * Request a password recovery
     *
     * @param  \NETZFABRIK\Model\UserRequestPasswordRecoveryRequestDefault $userRequestPasswordRecoveryRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPasswordRecoveryAsync($userRequestPasswordRecoveryRequestDefault, string $contentType = self::contentTypes['requestPasswordRecovery'][0])
    {
        return $this->requestPasswordRecoveryAsyncWithHttpInfo($userRequestPasswordRecoveryRequestDefault, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestPasswordRecoveryAsyncWithHttpInfo
     *
     * Request a password recovery
     *
     * @param  \NETZFABRIK\Model\UserRequestPasswordRecoveryRequestDefault $userRequestPasswordRecoveryRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestPasswordRecoveryAsyncWithHttpInfo($userRequestPasswordRecoveryRequestDefault, string $contentType = self::contentTypes['requestPasswordRecovery'][0])
    {
        $returnType = '';
        $request = $this->requestPasswordRecoveryRequest($userRequestPasswordRecoveryRequestDefault, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestPasswordRecovery'
     *
     * @param  \NETZFABRIK\Model\UserRequestPasswordRecoveryRequestDefault $userRequestPasswordRecoveryRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestPasswordRecoveryRequest($userRequestPasswordRecoveryRequestDefault, string $contentType = self::contentTypes['requestPasswordRecovery'][0])
    {

        // verify the required parameter 'userRequestPasswordRecoveryRequestDefault' is set
        if ($userRequestPasswordRecoveryRequestDefault === null || (is_array($userRequestPasswordRecoveryRequestDefault) && count($userRequestPasswordRecoveryRequestDefault) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userRequestPasswordRecoveryRequestDefault when calling requestPasswordRecovery'
            );
        }


        $resourcePath = '/auth/request-password-recovery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userRequestPasswordRecoveryRequestDefault)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userRequestPasswordRecoveryRequestDefault));
            } else {
                $httpBody = $userRequestPasswordRecoveryRequestDefault;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDefaultCustomer
     *
     * Set the default customer of the current user
     *
     * @param  \NETZFABRIK\Model\UserSetDefaultCustomerRequestDefault $userSetDefaultCustomerRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDefaultCustomer'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setDefaultCustomer($userSetDefaultCustomerRequestDefault, string $contentType = self::contentTypes['setDefaultCustomer'][0])
    {
        $this->setDefaultCustomerWithHttpInfo($userSetDefaultCustomerRequestDefault, $contentType);
    }

    /**
     * Operation setDefaultCustomerWithHttpInfo
     *
     * Set the default customer of the current user
     *
     * @param  \NETZFABRIK\Model\UserSetDefaultCustomerRequestDefault $userSetDefaultCustomerRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDefaultCustomer'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDefaultCustomerWithHttpInfo($userSetDefaultCustomerRequestDefault, string $contentType = self::contentTypes['setDefaultCustomer'][0])
    {
        $request = $this->setDefaultCustomerRequest($userSetDefaultCustomerRequestDefault, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setDefaultCustomerAsync
     *
     * Set the default customer of the current user
     *
     * @param  \NETZFABRIK\Model\UserSetDefaultCustomerRequestDefault $userSetDefaultCustomerRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDefaultCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultCustomerAsync($userSetDefaultCustomerRequestDefault, string $contentType = self::contentTypes['setDefaultCustomer'][0])
    {
        return $this->setDefaultCustomerAsyncWithHttpInfo($userSetDefaultCustomerRequestDefault, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDefaultCustomerAsyncWithHttpInfo
     *
     * Set the default customer of the current user
     *
     * @param  \NETZFABRIK\Model\UserSetDefaultCustomerRequestDefault $userSetDefaultCustomerRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDefaultCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultCustomerAsyncWithHttpInfo($userSetDefaultCustomerRequestDefault, string $contentType = self::contentTypes['setDefaultCustomer'][0])
    {
        $returnType = '';
        $request = $this->setDefaultCustomerRequest($userSetDefaultCustomerRequestDefault, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDefaultCustomer'
     *
     * @param  \NETZFABRIK\Model\UserSetDefaultCustomerRequestDefault $userSetDefaultCustomerRequestDefault The new User resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDefaultCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDefaultCustomerRequest($userSetDefaultCustomerRequestDefault, string $contentType = self::contentTypes['setDefaultCustomer'][0])
    {

        // verify the required parameter 'userSetDefaultCustomerRequestDefault' is set
        if ($userSetDefaultCustomerRequestDefault === null || (is_array($userSetDefaultCustomerRequestDefault) && count($userSetDefaultCustomerRequestDefault) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userSetDefaultCustomerRequestDefault when calling setDefaultCustomer'
            );
        }


        $resourcePath = '/user/default-customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($userSetDefaultCustomerRequestDefault)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($userSetDefaultCustomerRequestDefault));
            } else {
                $httpBody = $userSetDefaultCustomerRequestDefault;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testPasswordRecovery
     *
     * Test the password recovery token
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function testPasswordRecovery($id, string $contentType = self::contentTypes['testPasswordRecovery'][0])
    {
        $this->testPasswordRecoveryWithHttpInfo($id, $contentType);
    }

    /**
     * Operation testPasswordRecoveryWithHttpInfo
     *
     * Test the password recovery token
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function testPasswordRecoveryWithHttpInfo($id, string $contentType = self::contentTypes['testPasswordRecovery'][0])
    {
        $request = $this->testPasswordRecoveryRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation testPasswordRecoveryAsync
     *
     * Test the password recovery token
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPasswordRecoveryAsync($id, string $contentType = self::contentTypes['testPasswordRecovery'][0])
    {
        return $this->testPasswordRecoveryAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testPasswordRecoveryAsyncWithHttpInfo
     *
     * Test the password recovery token
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testPasswordRecoveryAsyncWithHttpInfo($id, string $contentType = self::contentTypes['testPasswordRecovery'][0])
    {
        $returnType = '';
        $request = $this->testPasswordRecoveryRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testPasswordRecovery'
     *
     * @param  string $id User identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testPasswordRecovery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testPasswordRecoveryRequest($id, string $contentType = self::contentTypes['testPasswordRecovery'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling testPasswordRecovery'
            );
        }


        $resourcePath = '/auth/recover-password/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
