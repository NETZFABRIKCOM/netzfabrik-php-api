<?php
/**
 * DomainApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NETZFABRIK\ApiException;
use NETZFABRIK\Configuration;
use NETZFABRIK\HeaderSelector;
use NETZFABRIK\ObjectSerializer;

/**
 * DomainApi Class Doc Comment
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelDomain' => [
            'application/json',
            'text/html',
        ],
        'checkDomainAvailability' => [
            'application/json',
            'text/html',
        ],
        'createHandle' => [
            'application/json',
            'text/html',
        ],
        'deleteDomainAuthCode' => [
            'application/json',
        ],
        'deleteDomainTransferLock' => [
            'application/json',
        ],
        'getDomain' => [
            'application/json',
        ],
        'getDomains' => [
            'application/json',
        ],
        'getHandle' => [
            'application/json',
        ],
        'getHandles' => [
            'application/json',
        ],
        'postDomain' => [
            'application/json',
            'text/html',
        ],
        'retrieveDomainAuthCode' => [
            'application/json',
            'text/html',
        ],
        'revokeCancelDomain' => [
            'application/json',
        ],
        'setDomainTransferLock' => [
            'application/json',
            'text/html',
        ],
        'transitDomain' => [
            'application/json',
            'text/html',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelDomain
     *
     * Cancel a domain on the given date. If no date is given, the domain will be cancelled immediately.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainCancelRequest $domainCancelRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead
     */
    public function cancelDomain($id, $domainCancelRequest, string $contentType = self::contentTypes['cancelDomain'][0])
    {
        list($response) = $this->cancelDomainWithHttpInfo($id, $domainCancelRequest, $contentType);
        return $response;
    }

    /**
     * Operation cancelDomainWithHttpInfo
     *
     * Cancel a domain on the given date. If no date is given, the domain will be cancelled immediately.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainCancelRequest $domainCancelRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDomainWithHttpInfo($id, $domainCancelRequest, string $contentType = self::contentTypes['cancelDomain'][0])
    {
        $request = $this->cancelDomainRequest($id, $domainCancelRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelDomainAsync
     *
     * Cancel a domain on the given date. If no date is given, the domain will be cancelled immediately.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainCancelRequest $domainCancelRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDomainAsync($id, $domainCancelRequest, string $contentType = self::contentTypes['cancelDomain'][0])
    {
        return $this->cancelDomainAsyncWithHttpInfo($id, $domainCancelRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelDomainAsyncWithHttpInfo
     *
     * Cancel a domain on the given date. If no date is given, the domain will be cancelled immediately.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainCancelRequest $domainCancelRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDomainAsyncWithHttpInfo($id, $domainCancelRequest, string $contentType = self::contentTypes['cancelDomain'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
        $request = $this->cancelDomainRequest($id, $domainCancelRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelDomain'
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainCancelRequest $domainCancelRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelDomainRequest($id, $domainCancelRequest, string $contentType = self::contentTypes['cancelDomain'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelDomain'
            );
        }

        // verify the required parameter 'domainCancelRequest' is set
        if ($domainCancelRequest === null || (is_array($domainCancelRequest) && count($domainCancelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainCancelRequest when calling cancelDomain'
            );
        }


        $resourcePath = '/domains/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domainCancelRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domainCancelRequest));
            } else {
                $httpBody = $domainCancelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkDomainAvailability
     *
     * Check if a domain is available
     *
     * @param  \NETZFABRIK\Model\DomainCheckDomainAvailabilityRequestDomainCheck $domainCheckDomainAvailabilityRequestDomainCheck The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDomainAvailability'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck
     */
    public function checkDomainAvailability($domainCheckDomainAvailabilityRequestDomainCheck, string $contentType = self::contentTypes['checkDomainAvailability'][0])
    {
        list($response) = $this->checkDomainAvailabilityWithHttpInfo($domainCheckDomainAvailabilityRequestDomainCheck, $contentType);
        return $response;
    }

    /**
     * Operation checkDomainAvailabilityWithHttpInfo
     *
     * Check if a domain is available
     *
     * @param  \NETZFABRIK\Model\DomainCheckDomainAvailabilityRequestDomainCheck $domainCheckDomainAvailabilityRequestDomainCheck The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDomainAvailability'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDomainAvailabilityWithHttpInfo($domainCheckDomainAvailabilityRequestDomainCheck, string $contentType = self::contentTypes['checkDomainAvailability'][0])
    {
        $request = $this->checkDomainAvailabilityRequest($domainCheckDomainAvailabilityRequestDomainCheck, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkDomainAvailabilityAsync
     *
     * Check if a domain is available
     *
     * @param  \NETZFABRIK\Model\DomainCheckDomainAvailabilityRequestDomainCheck $domainCheckDomainAvailabilityRequestDomainCheck The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDomainAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDomainAvailabilityAsync($domainCheckDomainAvailabilityRequestDomainCheck, string $contentType = self::contentTypes['checkDomainAvailability'][0])
    {
        return $this->checkDomainAvailabilityAsyncWithHttpInfo($domainCheckDomainAvailabilityRequestDomainCheck, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkDomainAvailabilityAsyncWithHttpInfo
     *
     * Check if a domain is available
     *
     * @param  \NETZFABRIK\Model\DomainCheckDomainAvailabilityRequestDomainCheck $domainCheckDomainAvailabilityRequestDomainCheck The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDomainAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDomainAvailabilityAsyncWithHttpInfo($domainCheckDomainAvailabilityRequestDomainCheck, string $contentType = self::contentTypes['checkDomainAvailability'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainAvailabilityResponseDomainCheck';
        $request = $this->checkDomainAvailabilityRequest($domainCheckDomainAvailabilityRequestDomainCheck, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkDomainAvailability'
     *
     * @param  \NETZFABRIK\Model\DomainCheckDomainAvailabilityRequestDomainCheck $domainCheckDomainAvailabilityRequestDomainCheck The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDomainAvailability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkDomainAvailabilityRequest($domainCheckDomainAvailabilityRequestDomainCheck, string $contentType = self::contentTypes['checkDomainAvailability'][0])
    {

        // verify the required parameter 'domainCheckDomainAvailabilityRequestDomainCheck' is set
        if ($domainCheckDomainAvailabilityRequestDomainCheck === null || (is_array($domainCheckDomainAvailabilityRequestDomainCheck) && count($domainCheckDomainAvailabilityRequestDomainCheck) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainCheckDomainAvailabilityRequestDomainCheck when calling checkDomainAvailability'
            );
        }


        $resourcePath = '/domains/check-availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domainCheckDomainAvailabilityRequestDomainCheck)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domainCheckDomainAvailabilityRequestDomainCheck));
            } else {
                $httpBody = $domainCheckDomainAvailabilityRequestDomainCheck;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createHandle
     *
     * Create a new handle
     *
     * @param  \NETZFABRIK\Model\HandleCreateHandleRequestHandleWrite $handleCreateHandleRequestHandleWrite The new Handle resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createHandle'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\HandleHandleRead
     */
    public function createHandle($handleCreateHandleRequestHandleWrite, string $contentType = self::contentTypes['createHandle'][0])
    {
        list($response) = $this->createHandleWithHttpInfo($handleCreateHandleRequestHandleWrite, $contentType);
        return $response;
    }

    /**
     * Operation createHandleWithHttpInfo
     *
     * Create a new handle
     *
     * @param  \NETZFABRIK\Model\HandleCreateHandleRequestHandleWrite $handleCreateHandleRequestHandleWrite The new Handle resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createHandle'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\HandleHandleRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function createHandleWithHttpInfo($handleCreateHandleRequestHandleWrite, string $contentType = self::contentTypes['createHandle'][0])
    {
        $request = $this->createHandleRequest($handleCreateHandleRequestHandleWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\HandleHandleRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\HandleHandleRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\HandleHandleRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\HandleHandleRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\HandleHandleRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createHandleAsync
     *
     * Create a new handle
     *
     * @param  \NETZFABRIK\Model\HandleCreateHandleRequestHandleWrite $handleCreateHandleRequestHandleWrite The new Handle resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createHandleAsync($handleCreateHandleRequestHandleWrite, string $contentType = self::contentTypes['createHandle'][0])
    {
        return $this->createHandleAsyncWithHttpInfo($handleCreateHandleRequestHandleWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createHandleAsyncWithHttpInfo
     *
     * Create a new handle
     *
     * @param  \NETZFABRIK\Model\HandleCreateHandleRequestHandleWrite $handleCreateHandleRequestHandleWrite The new Handle resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createHandleAsyncWithHttpInfo($handleCreateHandleRequestHandleWrite, string $contentType = self::contentTypes['createHandle'][0])
    {
        $returnType = '\NETZFABRIK\Model\HandleHandleRead';
        $request = $this->createHandleRequest($handleCreateHandleRequestHandleWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createHandle'
     *
     * @param  \NETZFABRIK\Model\HandleCreateHandleRequestHandleWrite $handleCreateHandleRequestHandleWrite The new Handle resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createHandleRequest($handleCreateHandleRequestHandleWrite, string $contentType = self::contentTypes['createHandle'][0])
    {

        // verify the required parameter 'handleCreateHandleRequestHandleWrite' is set
        if ($handleCreateHandleRequestHandleWrite === null || (is_array($handleCreateHandleRequestHandleWrite) && count($handleCreateHandleRequestHandleWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handleCreateHandleRequestHandleWrite when calling createHandle'
            );
        }


        $resourcePath = '/handles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($handleCreateHandleRequestHandleWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($handleCreateHandleRequestHandleWrite));
            } else {
                $httpBody = $handleCreateHandleRequestHandleWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDomainAuthCode
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDomainAuthCode($id, string $contentType = self::contentTypes['deleteDomainAuthCode'][0])
    {
        $this->deleteDomainAuthCodeWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteDomainAuthCodeWithHttpInfo
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDomainAuthCodeWithHttpInfo($id, string $contentType = self::contentTypes['deleteDomainAuthCode'][0])
    {
        $request = $this->deleteDomainAuthCodeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDomainAuthCodeAsync
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainAuthCodeAsync($id, string $contentType = self::contentTypes['deleteDomainAuthCode'][0])
    {
        return $this->deleteDomainAuthCodeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDomainAuthCodeAsyncWithHttpInfo
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainAuthCodeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteDomainAuthCode'][0])
    {
        $returnType = '';
        $request = $this->deleteDomainAuthCodeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDomainAuthCode'
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDomainAuthCodeRequest($id, string $contentType = self::contentTypes['deleteDomainAuthCode'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDomainAuthCode'
            );
        }


        $resourcePath = '/domains/{id}/auth-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDomainTransferLock
     *
     * Delete the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDomainTransferLock($id, string $contentType = self::contentTypes['deleteDomainTransferLock'][0])
    {
        $this->deleteDomainTransferLockWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteDomainTransferLockWithHttpInfo
     *
     * Delete the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDomainTransferLockWithHttpInfo($id, string $contentType = self::contentTypes['deleteDomainTransferLock'][0])
    {
        $request = $this->deleteDomainTransferLockRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDomainTransferLockAsync
     *
     * Delete the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainTransferLockAsync($id, string $contentType = self::contentTypes['deleteDomainTransferLock'][0])
    {
        return $this->deleteDomainTransferLockAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDomainTransferLockAsyncWithHttpInfo
     *
     * Delete the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainTransferLockAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteDomainTransferLock'][0])
    {
        $returnType = '';
        $request = $this->deleteDomainTransferLockRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDomainTransferLock'
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDomainTransferLockRequest($id, string $contentType = self::contentTypes['deleteDomainTransferLock'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDomainTransferLock'
            );
        }


        $resourcePath = '/domains/{id}/transfer-lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDomain
     *
     * Get a domain by id
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead
     */
    public function getDomain($id, string $contentType = self::contentTypes['getDomain'][0])
    {
        list($response) = $this->getDomainWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDomainWithHttpInfo
     *
     * Get a domain by id
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDomainWithHttpInfo($id, string $contentType = self::contentTypes['getDomain'][0])
    {
        $request = $this->getDomainRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDomainAsync
     *
     * Get a domain by id
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainAsync($id, string $contentType = self::contentTypes['getDomain'][0])
    {
        return $this->getDomainAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDomainAsyncWithHttpInfo
     *
     * Get a domain by id
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDomain'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
        $request = $this->getDomainRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDomain'
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDomainRequest($id, string $contentType = self::contentTypes['getDomain'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDomain'
            );
        }


        $resourcePath = '/domains/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDomains
     *
     * Get the current domains
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $name  (optional)
     * @param  string $tld  (optional)
     * @param  string $status  (optional)
     * @param  string $orderName  (optional)
     * @param  string $orderTld  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderRegistrationDate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomains'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\DomainDomainList[]
     */
    public function getDomains($page = 1, $name = null, $tld = null, $status = null, $orderName = null, $orderTld = null, $orderStatus = null, $orderRegistrationDate = null, string $contentType = self::contentTypes['getDomains'][0])
    {
        list($response) = $this->getDomainsWithHttpInfo($page, $name, $tld, $status, $orderName, $orderTld, $orderStatus, $orderRegistrationDate, $contentType);
        return $response;
    }

    /**
     * Operation getDomainsWithHttpInfo
     *
     * Get the current domains
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $name  (optional)
     * @param  string $tld  (optional)
     * @param  string $status  (optional)
     * @param  string $orderName  (optional)
     * @param  string $orderTld  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderRegistrationDate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomains'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\DomainDomainList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDomainsWithHttpInfo($page = 1, $name = null, $tld = null, $status = null, $orderName = null, $orderTld = null, $orderStatus = null, $orderRegistrationDate = null, string $contentType = self::contentTypes['getDomains'][0])
    {
        $request = $this->getDomainsRequest($page, $name, $tld, $status, $orderName, $orderTld, $orderStatus, $orderRegistrationDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\DomainDomainList[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainList[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainList[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainList[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainList[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDomainsAsync
     *
     * Get the current domains
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $name  (optional)
     * @param  string $tld  (optional)
     * @param  string $status  (optional)
     * @param  string $orderName  (optional)
     * @param  string $orderTld  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderRegistrationDate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainsAsync($page = 1, $name = null, $tld = null, $status = null, $orderName = null, $orderTld = null, $orderStatus = null, $orderRegistrationDate = null, string $contentType = self::contentTypes['getDomains'][0])
    {
        return $this->getDomainsAsyncWithHttpInfo($page, $name, $tld, $status, $orderName, $orderTld, $orderStatus, $orderRegistrationDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDomainsAsyncWithHttpInfo
     *
     * Get the current domains
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $name  (optional)
     * @param  string $tld  (optional)
     * @param  string $status  (optional)
     * @param  string $orderName  (optional)
     * @param  string $orderTld  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderRegistrationDate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainsAsyncWithHttpInfo($page = 1, $name = null, $tld = null, $status = null, $orderName = null, $orderTld = null, $orderStatus = null, $orderRegistrationDate = null, string $contentType = self::contentTypes['getDomains'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainList[]';
        $request = $this->getDomainsRequest($page, $name, $tld, $status, $orderName, $orderTld, $orderStatus, $orderRegistrationDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDomains'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $name  (optional)
     * @param  string $tld  (optional)
     * @param  string $status  (optional)
     * @param  string $orderName  (optional)
     * @param  string $orderTld  (optional)
     * @param  string $orderStatus  (optional)
     * @param  string $orderRegistrationDate  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDomainsRequest($page = 1, $name = null, $tld = null, $status = null, $orderName = null, $orderTld = null, $orderStatus = null, $orderRegistrationDate = null, string $contentType = self::contentTypes['getDomains'][0])
    {










        $resourcePath = '/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tld,
            'tld', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderName,
            'order[name]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderTld,
            'order[tld]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderStatus,
            'order[status]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderRegistrationDate,
            'order[registrationDate]', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHandle
     *
     * Get a handle by id
     *
     * @param  string $id Handle identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandle'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\Handle
     */
    public function getHandle($id, string $contentType = self::contentTypes['getHandle'][0])
    {
        list($response) = $this->getHandleWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getHandleWithHttpInfo
     *
     * Get a handle by id
     *
     * @param  string $id Handle identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandle'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\Handle, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHandleWithHttpInfo($id, string $contentType = self::contentTypes['getHandle'][0])
    {
        $request = $this->getHandleRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\Handle' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\Handle' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\Handle', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\Handle';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\Handle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHandleAsync
     *
     * Get a handle by id
     *
     * @param  string $id Handle identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandleAsync($id, string $contentType = self::contentTypes['getHandle'][0])
    {
        return $this->getHandleAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHandleAsyncWithHttpInfo
     *
     * Get a handle by id
     *
     * @param  string $id Handle identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandleAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getHandle'][0])
    {
        $returnType = '\NETZFABRIK\Model\Handle';
        $request = $this->getHandleRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHandle'
     *
     * @param  string $id Handle identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandle'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHandleRequest($id, string $contentType = self::contentTypes['getHandle'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHandle'
            );
        }


        $resourcePath = '/handles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHandles
     *
     * Get the current handles
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandles'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\Handle[]
     */
    public function getHandles($page = 1, string $contentType = self::contentTypes['getHandles'][0])
    {
        list($response) = $this->getHandlesWithHttpInfo($page, $contentType);
        return $response;
    }

    /**
     * Operation getHandlesWithHttpInfo
     *
     * Get the current handles
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandles'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\Handle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHandlesWithHttpInfo($page = 1, string $contentType = self::contentTypes['getHandles'][0])
    {
        $request = $this->getHandlesRequest($page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NETZFABRIK\Model\Handle[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\Handle[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\Handle[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\Handle[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\Handle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHandlesAsync
     *
     * Get the current handles
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandlesAsync($page = 1, string $contentType = self::contentTypes['getHandles'][0])
    {
        return $this->getHandlesAsyncWithHttpInfo($page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHandlesAsyncWithHttpInfo
     *
     * Get the current handles
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandlesAsyncWithHttpInfo($page = 1, string $contentType = self::contentTypes['getHandles'][0])
    {
        $returnType = '\NETZFABRIK\Model\Handle[]';
        $request = $this->getHandlesRequest($page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHandles'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHandles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHandlesRequest($page = 1, string $contentType = self::contentTypes['getHandles'][0])
    {



        $resourcePath = '/handles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDomain
     *
     * Register a new domain
     *
     * @param  \NETZFABRIK\Model\DomainRegisterDomainRequest $domainRegisterDomainRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postDomain($domainRegisterDomainRequest, string $contentType = self::contentTypes['postDomain'][0])
    {
        $this->postDomainWithHttpInfo($domainRegisterDomainRequest, $contentType);
    }

    /**
     * Operation postDomainWithHttpInfo
     *
     * Register a new domain
     *
     * @param  \NETZFABRIK\Model\DomainRegisterDomainRequest $domainRegisterDomainRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDomainWithHttpInfo($domainRegisterDomainRequest, string $contentType = self::contentTypes['postDomain'][0])
    {
        $request = $this->postDomainRequest($domainRegisterDomainRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postDomainAsync
     *
     * Register a new domain
     *
     * @param  \NETZFABRIK\Model\DomainRegisterDomainRequest $domainRegisterDomainRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDomainAsync($domainRegisterDomainRequest, string $contentType = self::contentTypes['postDomain'][0])
    {
        return $this->postDomainAsyncWithHttpInfo($domainRegisterDomainRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDomainAsyncWithHttpInfo
     *
     * Register a new domain
     *
     * @param  \NETZFABRIK\Model\DomainRegisterDomainRequest $domainRegisterDomainRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDomainAsyncWithHttpInfo($domainRegisterDomainRequest, string $contentType = self::contentTypes['postDomain'][0])
    {
        $returnType = '';
        $request = $this->postDomainRequest($domainRegisterDomainRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDomain'
     *
     * @param  \NETZFABRIK\Model\DomainRegisterDomainRequest $domainRegisterDomainRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDomainRequest($domainRegisterDomainRequest, string $contentType = self::contentTypes['postDomain'][0])
    {

        // verify the required parameter 'domainRegisterDomainRequest' is set
        if ($domainRegisterDomainRequest === null || (is_array($domainRegisterDomainRequest) && count($domainRegisterDomainRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainRegisterDomainRequest when calling postDomain'
            );
        }


        $resourcePath = '/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domainRegisterDomainRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domainRegisterDomainRequest));
            } else {
                $httpBody = $domainRegisterDomainRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveDomainAuthCode
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead
     */
    public function retrieveDomainAuthCode($id, $body, string $contentType = self::contentTypes['retrieveDomainAuthCode'][0])
    {
        list($response) = $this->retrieveDomainAuthCodeWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation retrieveDomainAuthCodeWithHttpInfo
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveDomainAuthCodeWithHttpInfo($id, $body, string $contentType = self::contentTypes['retrieveDomainAuthCode'][0])
    {
        $request = $this->retrieveDomainAuthCodeRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveDomainAuthCodeAsync
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveDomainAuthCodeAsync($id, $body, string $contentType = self::contentTypes['retrieveDomainAuthCode'][0])
    {
        return $this->retrieveDomainAuthCodeAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveDomainAuthCodeAsyncWithHttpInfo
     *
     * Request the auth code for a domain
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveDomainAuthCodeAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['retrieveDomainAuthCode'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
        $request = $this->retrieveDomainAuthCodeRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveDomainAuthCode'
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveDomainAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveDomainAuthCodeRequest($id, $body, string $contentType = self::contentTypes['retrieveDomainAuthCode'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveDomainAuthCode'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveDomainAuthCode'
            );
        }


        $resourcePath = '/domains/{id}/auth-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeCancelDomain
     *
     * Revokes the cancellation of a domain.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCancelDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeCancelDomain($id, string $contentType = self::contentTypes['revokeCancelDomain'][0])
    {
        $this->revokeCancelDomainWithHttpInfo($id, $contentType);
    }

    /**
     * Operation revokeCancelDomainWithHttpInfo
     *
     * Revokes the cancellation of a domain.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCancelDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeCancelDomainWithHttpInfo($id, string $contentType = self::contentTypes['revokeCancelDomain'][0])
    {
        $request = $this->revokeCancelDomainRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation revokeCancelDomainAsync
     *
     * Revokes the cancellation of a domain.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeCancelDomainAsync($id, string $contentType = self::contentTypes['revokeCancelDomain'][0])
    {
        return $this->revokeCancelDomainAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeCancelDomainAsyncWithHttpInfo
     *
     * Revokes the cancellation of a domain.
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeCancelDomainAsyncWithHttpInfo($id, string $contentType = self::contentTypes['revokeCancelDomain'][0])
    {
        $returnType = '';
        $request = $this->revokeCancelDomainRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeCancelDomain'
     *
     * @param  string $id Domain identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCancelDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeCancelDomainRequest($id, string $contentType = self::contentTypes['revokeCancelDomain'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling revokeCancelDomain'
            );
        }


        $resourcePath = '/domains/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDomainTransferLock
     *
     * Set the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead
     */
    public function setDomainTransferLock($id, $body, string $contentType = self::contentTypes['setDomainTransferLock'][0])
    {
        list($response) = $this->setDomainTransferLockWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation setDomainTransferLockWithHttpInfo
     *
     * Set the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDomainTransferLockWithHttpInfo($id, $body, string $contentType = self::contentTypes['setDomainTransferLock'][0])
    {
        $request = $this->setDomainTransferLockRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setDomainTransferLockAsync
     *
     * Set the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDomainTransferLockAsync($id, $body, string $contentType = self::contentTypes['setDomainTransferLock'][0])
    {
        return $this->setDomainTransferLockAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDomainTransferLockAsyncWithHttpInfo
     *
     * Set the transfer lock for a domain. This is not available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDomainTransferLockAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['setDomainTransferLock'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
        $request = $this->setDomainTransferLockRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDomainTransferLock'
     *
     * @param  string $id Domain identifier (required)
     * @param  mixed $body The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setDomainTransferLock'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDomainTransferLockRequest($id, $body, string $contentType = self::contentTypes['setDomainTransferLock'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling setDomainTransferLock'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setDomainTransferLock'
            );
        }


        $resourcePath = '/domains/{id}/transfer-lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transitDomain
     *
     * Gives the domain to the registrar. This is only available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainTransitRequest $domainTransitRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transitDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead
     */
    public function transitDomain($id, $domainTransitRequest, string $contentType = self::contentTypes['transitDomain'][0])
    {
        list($response) = $this->transitDomainWithHttpInfo($id, $domainTransitRequest, $contentType);
        return $response;
    }

    /**
     * Operation transitDomainWithHttpInfo
     *
     * Gives the domain to the registrar. This is only available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainTransitRequest $domainTransitRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transitDomain'] to see the possible values for this operation
     *
     * @throws \NETZFABRIK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function transitDomainWithHttpInfo($id, $domainTransitRequest, string $contentType = self::contentTypes['transitDomain'][0])
    {
        $request = $this->transitDomainRequest($id, $domainTransitRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transitDomainAsync
     *
     * Gives the domain to the registrar. This is only available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainTransitRequest $domainTransitRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transitDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transitDomainAsync($id, $domainTransitRequest, string $contentType = self::contentTypes['transitDomain'][0])
    {
        return $this->transitDomainAsyncWithHttpInfo($id, $domainTransitRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transitDomainAsyncWithHttpInfo
     *
     * Gives the domain to the registrar. This is only available for .de domains.
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainTransitRequest $domainTransitRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transitDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transitDomainAsyncWithHttpInfo($id, $domainTransitRequest, string $contentType = self::contentTypes['transitDomain'][0])
    {
        $returnType = '\NETZFABRIK\Model\DomainDomainReadHandleReadNameserverRead';
        $request = $this->transitDomainRequest($id, $domainTransitRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transitDomain'
     *
     * @param  string $id Domain identifier (required)
     * @param  \NETZFABRIK\Model\DomainTransitRequest $domainTransitRequest The new Domain resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transitDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transitDomainRequest($id, $domainTransitRequest, string $contentType = self::contentTypes['transitDomain'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transitDomain'
            );
        }

        // verify the required parameter 'domainTransitRequest' is set
        if ($domainTransitRequest === null || (is_array($domainTransitRequest) && count($domainTransitRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainTransitRequest when calling transitDomain'
            );
        }


        $resourcePath = '/domains/{id}/transit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($domainTransitRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($domainTransitRequest));
            } else {
                $httpBody = $domainTransitRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
