<?php
/**
 * WebspaceWebspaceRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Model;

use \ArrayAccess;
use \NETZFABRIK\ObjectSerializer;

/**
 * WebspaceWebspaceRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebspaceWebspaceRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webspace-webspace.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'username' => 'string',
        'ftpPassword' => 'string',
        'ftpUsername' => 'string',
        'pleskHost' => '\NETZFABRIK\Model\WebspaceWebspaceReadPleskHost',
        'ipAddressV4' => '\NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV4',
        'ipAddressV6' => '\NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV6',
        'plan' => '\NETZFABRIK\Model\WebspacePlanWebspaceRead',
        'ftpHost' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'ftpPassword' => null,
        'ftpUsername' => null,
        'pleskHost' => null,
        'ipAddressV4' => null,
        'ipAddressV6' => null,
        'plan' => null,
        'ftpHost' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'username' => false,
		'ftpPassword' => false,
		'ftpUsername' => false,
		'pleskHost' => true,
		'ipAddressV4' => true,
		'ipAddressV6' => true,
		'plan' => false,
		'ftpHost' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'ftpPassword' => 'ftpPassword',
        'ftpUsername' => 'ftpUsername',
        'pleskHost' => 'pleskHost',
        'ipAddressV4' => 'ipAddressV4',
        'ipAddressV6' => 'ipAddressV6',
        'plan' => 'plan',
        'ftpHost' => 'ftpHost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'ftpPassword' => 'setFtpPassword',
        'ftpUsername' => 'setFtpUsername',
        'pleskHost' => 'setPleskHost',
        'ipAddressV4' => 'setIpAddressV4',
        'ipAddressV6' => 'setIpAddressV6',
        'plan' => 'setPlan',
        'ftpHost' => 'setFtpHost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'ftpPassword' => 'getFtpPassword',
        'ftpUsername' => 'getFtpUsername',
        'pleskHost' => 'getPleskHost',
        'ipAddressV4' => 'getIpAddressV4',
        'ipAddressV6' => 'getIpAddressV6',
        'plan' => 'getPlan',
        'ftpHost' => 'getFtpHost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('ftpPassword', $data ?? [], null);
        $this->setIfExists('ftpUsername', $data ?? [], null);
        $this->setIfExists('pleskHost', $data ?? [], null);
        $this->setIfExists('ipAddressV4', $data ?? [], null);
        $this->setIfExists('ipAddressV6', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('ftpHost', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets ftpPassword
     *
     * @return string|null
     */
    public function getFtpPassword()
    {
        return $this->container['ftpPassword'];
    }

    /**
     * Sets ftpPassword
     *
     * @param string|null $ftpPassword The password of the ftp account
     *
     * @return self
     */
    public function setFtpPassword($ftpPassword)
    {
        if (is_null($ftpPassword)) {
            throw new \InvalidArgumentException('non-nullable ftpPassword cannot be null');
        }
        $this->container['ftpPassword'] = $ftpPassword;

        return $this;
    }

    /**
     * Gets ftpUsername
     *
     * @return string|null
     */
    public function getFtpUsername()
    {
        return $this->container['ftpUsername'];
    }

    /**
     * Sets ftpUsername
     *
     * @param string|null $ftpUsername The username of the ftp account
     *
     * @return self
     */
    public function setFtpUsername($ftpUsername)
    {
        if (is_null($ftpUsername)) {
            throw new \InvalidArgumentException('non-nullable ftpUsername cannot be null');
        }
        $this->container['ftpUsername'] = $ftpUsername;

        return $this;
    }

    /**
     * Gets pleskHost
     *
     * @return \NETZFABRIK\Model\WebspaceWebspaceReadPleskHost|null
     */
    public function getPleskHost()
    {
        return $this->container['pleskHost'];
    }

    /**
     * Sets pleskHost
     *
     * @param \NETZFABRIK\Model\WebspaceWebspaceReadPleskHost|null $pleskHost pleskHost
     *
     * @return self
     */
    public function setPleskHost($pleskHost)
    {
        if (is_null($pleskHost)) {
            array_push($this->openAPINullablesSetToNull, 'pleskHost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pleskHost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pleskHost'] = $pleskHost;

        return $this;
    }

    /**
     * Gets ipAddressV4
     *
     * @return \NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV4|null
     */
    public function getIpAddressV4()
    {
        return $this->container['ipAddressV4'];
    }

    /**
     * Sets ipAddressV4
     *
     * @param \NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV4|null $ipAddressV4 ipAddressV4
     *
     * @return self
     */
    public function setIpAddressV4($ipAddressV4)
    {
        if (is_null($ipAddressV4)) {
            array_push($this->openAPINullablesSetToNull, 'ipAddressV4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ipAddressV4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ipAddressV4'] = $ipAddressV4;

        return $this;
    }

    /**
     * Gets ipAddressV6
     *
     * @return \NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV6|null
     */
    public function getIpAddressV6()
    {
        return $this->container['ipAddressV6'];
    }

    /**
     * Sets ipAddressV6
     *
     * @param \NETZFABRIK\Model\WebspaceWebspaceReadIpAddressV6|null $ipAddressV6 ipAddressV6
     *
     * @return self
     */
    public function setIpAddressV6($ipAddressV6)
    {
        if (is_null($ipAddressV6)) {
            array_push($this->openAPINullablesSetToNull, 'ipAddressV6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ipAddressV6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ipAddressV6'] = $ipAddressV6;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \NETZFABRIK\Model\WebspacePlanWebspaceRead|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \NETZFABRIK\Model\WebspacePlanWebspaceRead|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets ftpHost
     *
     * @return string|null
     */
    public function getFtpHost()
    {
        return $this->container['ftpHost'];
    }

    /**
     * Sets ftpHost
     *
     * @param string|null $ftpHost ftpHost
     *
     * @return self
     */
    public function setFtpHost($ftpHost)
    {
        if (is_null($ftpHost)) {
            throw new \InvalidArgumentException('non-nullable ftpHost cannot be null');
        }
        $this->container['ftpHost'] = $ftpHost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


