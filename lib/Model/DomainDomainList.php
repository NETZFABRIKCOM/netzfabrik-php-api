<?php
/**
 * DomainDomainList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Model;

use \ArrayAccess;
use \NETZFABRIK\ObjectSerializer;

/**
 * DomainDomainList Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainDomainList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Domain-domain.list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'isDomainTransferLocked' => 'bool',
        'authCode' => 'string',
        'authCodeExpiryDate' => '\DateTime',
        'isAutoRenewEnabled' => 'bool',
        'registrationDate' => '\DateTime',
        'status' => 'string',
        'transitType' => 'string',
        'dnsZoneId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'isDomainTransferLocked' => null,
        'authCode' => null,
        'authCodeExpiryDate' => 'date-time',
        'isAutoRenewEnabled' => null,
        'registrationDate' => 'date-time',
        'status' => null,
        'transitType' => null,
        'dnsZoneId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'isDomainTransferLocked' => false,
		'authCode' => true,
		'authCodeExpiryDate' => true,
		'isAutoRenewEnabled' => false,
		'registrationDate' => false,
		'status' => false,
		'transitType' => true,
		'dnsZoneId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'isDomainTransferLocked' => 'isDomainTransferLocked',
        'authCode' => 'authCode',
        'authCodeExpiryDate' => 'authCodeExpiryDate',
        'isAutoRenewEnabled' => 'isAutoRenewEnabled',
        'registrationDate' => 'registrationDate',
        'status' => 'status',
        'transitType' => 'transitType',
        'dnsZoneId' => 'dnsZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'isDomainTransferLocked' => 'setIsDomainTransferLocked',
        'authCode' => 'setAuthCode',
        'authCodeExpiryDate' => 'setAuthCodeExpiryDate',
        'isAutoRenewEnabled' => 'setIsAutoRenewEnabled',
        'registrationDate' => 'setRegistrationDate',
        'status' => 'setStatus',
        'transitType' => 'setTransitType',
        'dnsZoneId' => 'setDnsZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'isDomainTransferLocked' => 'getIsDomainTransferLocked',
        'authCode' => 'getAuthCode',
        'authCodeExpiryDate' => 'getAuthCodeExpiryDate',
        'isAutoRenewEnabled' => 'getIsAutoRenewEnabled',
        'registrationDate' => 'getRegistrationDate',
        'status' => 'getStatus',
        'transitType' => 'getTransitType',
        'dnsZoneId' => 'getDnsZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CREATED = 'created';
    public const STATUS_PENDING = 'pending';
    public const STATUS_ONLINE = 'online';
    public const STATUS_DELETED = 'deleted';
    public const STATUS_PENDING_DELETE = 'pendingDelete';
    public const STATUS_FAILED_NAMESERVER = 'failedNameserver';
    public const STATUS_FAILED_REGISTRATION = 'failedRegistration';
    public const STATUS_FAILED_TRANSFER = 'failedTransfer';
    public const STATUS_UNKNOWN = 'unknown';
    public const STATUS_TRANSFERED_OUT = 'transferedOut';
    public const STATUS_TRANSIT = 'transit';
    public const STATUS_PENDING_TRANSIT = 'pendingTransit';
    public const STATUS_ZONE_CREATED = 'zoneCreated';
    public const TRANSIT_TYPE_CONNECTED = 'connected';
    public const TRANSIT_TYPE_DISCONNECTED = 'disconnected';
    public const TRANSIT_TYPE_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_ONLINE,
            self::STATUS_DELETED,
            self::STATUS_PENDING_DELETE,
            self::STATUS_FAILED_NAMESERVER,
            self::STATUS_FAILED_REGISTRATION,
            self::STATUS_FAILED_TRANSFER,
            self::STATUS_UNKNOWN,
            self::STATUS_TRANSFERED_OUT,
            self::STATUS_TRANSIT,
            self::STATUS_PENDING_TRANSIT,
            self::STATUS_ZONE_CREATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransitTypeAllowableValues()
    {
        return [
            self::TRANSIT_TYPE_CONNECTED,
            self::TRANSIT_TYPE_DISCONNECTED,
            self::TRANSIT_TYPE_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('isDomainTransferLocked', $data ?? [], null);
        $this->setIfExists('authCode', $data ?? [], null);
        $this->setIfExists('authCodeExpiryDate', $data ?? [], null);
        $this->setIfExists('isAutoRenewEnabled', $data ?? [], null);
        $this->setIfExists('registrationDate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transitType', $data ?? [], null);
        $this->setIfExists('dnsZoneId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransitTypeAllowableValues();
        if (!is_null($this->container['transitType']) && !in_array($this->container['transitType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transitType', must be one of '%s'",
                $this->container['transitType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isDomainTransferLocked
     *
     * @return bool|null
     */
    public function getIsDomainTransferLocked()
    {
        return $this->container['isDomainTransferLocked'];
    }

    /**
     * Sets isDomainTransferLocked
     *
     * @param bool|null $isDomainTransferLocked isDomainTransferLocked
     *
     * @return self
     */
    public function setIsDomainTransferLocked($isDomainTransferLocked)
    {
        if (is_null($isDomainTransferLocked)) {
            throw new \InvalidArgumentException('non-nullable isDomainTransferLocked cannot be null');
        }
        $this->container['isDomainTransferLocked'] = $isDomainTransferLocked;

        return $this;
    }

    /**
     * Gets authCode
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['authCode'];
    }

    /**
     * Sets authCode
     *
     * @param string|null $authCode authCode
     *
     * @return self
     */
    public function setAuthCode($authCode)
    {
        if (is_null($authCode)) {
            array_push($this->openAPINullablesSetToNull, 'authCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authCode'] = $authCode;

        return $this;
    }

    /**
     * Gets authCodeExpiryDate
     *
     * @return \DateTime|null
     */
    public function getAuthCodeExpiryDate()
    {
        return $this->container['authCodeExpiryDate'];
    }

    /**
     * Sets authCodeExpiryDate
     *
     * @param \DateTime|null $authCodeExpiryDate authCodeExpiryDate
     *
     * @return self
     */
    public function setAuthCodeExpiryDate($authCodeExpiryDate)
    {
        if (is_null($authCodeExpiryDate)) {
            array_push($this->openAPINullablesSetToNull, 'authCodeExpiryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authCodeExpiryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authCodeExpiryDate'] = $authCodeExpiryDate;

        return $this;
    }

    /**
     * Gets isAutoRenewEnabled
     *
     * @return bool|null
     */
    public function getIsAutoRenewEnabled()
    {
        return $this->container['isAutoRenewEnabled'];
    }

    /**
     * Sets isAutoRenewEnabled
     *
     * @param bool|null $isAutoRenewEnabled isAutoRenewEnabled
     *
     * @return self
     */
    public function setIsAutoRenewEnabled($isAutoRenewEnabled)
    {
        if (is_null($isAutoRenewEnabled)) {
            throw new \InvalidArgumentException('non-nullable isAutoRenewEnabled cannot be null');
        }
        $this->container['isAutoRenewEnabled'] = $isAutoRenewEnabled;

        return $this;
    }

    /**
     * Gets registrationDate
     *
     * @return \DateTime|null
     */
    public function getRegistrationDate()
    {
        return $this->container['registrationDate'];
    }

    /**
     * Sets registrationDate
     *
     * @param \DateTime|null $registrationDate registrationDate
     *
     * @return self
     */
    public function setRegistrationDate($registrationDate)
    {
        if (is_null($registrationDate)) {
            throw new \InvalidArgumentException('non-nullable registrationDate cannot be null');
        }
        $this->container['registrationDate'] = $registrationDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transitType
     *
     * @return string|null
     */
    public function getTransitType()
    {
        return $this->container['transitType'];
    }

    /**
     * Sets transitType
     *
     * @param string|null $transitType transitType
     *
     * @return self
     */
    public function setTransitType($transitType)
    {
        if (is_null($transitType)) {
            array_push($this->openAPINullablesSetToNull, 'transitType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transitType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTransitTypeAllowableValues();
        if (!is_null($transitType) && !in_array($transitType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transitType', must be one of '%s'",
                    $transitType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transitType'] = $transitType;

        return $this;
    }

    /**
     * Gets dnsZoneId
     *
     * @return string|null
     */
    public function getDnsZoneId()
    {
        return $this->container['dnsZoneId'];
    }

    /**
     * Sets dnsZoneId
     *
     * @param string|null $dnsZoneId dnsZoneId
     *
     * @return self
     */
    public function setDnsZoneId($dnsZoneId)
    {
        if (is_null($dnsZoneId)) {
            array_push($this->openAPINullablesSetToNull, 'dnsZoneId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dnsZoneId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dnsZoneId'] = $dnsZoneId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


