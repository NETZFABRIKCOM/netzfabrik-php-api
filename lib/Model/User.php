<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Model;

use \ArrayAccess;
use \NETZFABRIK\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'company' => 'string',
        'email' => 'string',
        'password' => 'string',
        'repeatPassword' => 'string',
        'zammadId' => 'string',
        'defaultAccount' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'userIdentifier' => 'string',
        'passwordEqual' => 'bool',
        'completed' => 'bool',
        'name' => 'string',
        'superAdmin' => 'bool',
        'passwordRecoveryTokenExpired' => 'bool',
        'resetPasswordToken' => 'string',
        'resetPasswordTokenExpiresAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'firstName' => null,
        'lastName' => null,
        'company' => null,
        'email' => 'email',
        'password' => null,
        'repeatPassword' => null,
        'zammadId' => null,
        'defaultAccount' => 'iri-reference',
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'userIdentifier' => null,
        'passwordEqual' => null,
        'completed' => null,
        'name' => null,
        'superAdmin' => null,
        'passwordRecoveryTokenExpired' => null,
        'resetPasswordToken' => null,
        'resetPasswordTokenExpiresAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'firstName' => false,
		'lastName' => false,
		'company' => true,
		'email' => false,
		'password' => false,
		'repeatPassword' => true,
		'zammadId' => true,
		'defaultAccount' => true,
		'createdAt' => false,
		'updatedAt' => false,
		'userIdentifier' => false,
		'passwordEqual' => false,
		'completed' => false,
		'name' => false,
		'superAdmin' => false,
		'passwordRecoveryTokenExpired' => false,
		'resetPasswordToken' => true,
		'resetPasswordTokenExpiresAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'company' => 'company',
        'email' => 'email',
        'password' => 'password',
        'repeatPassword' => 'repeatPassword',
        'zammadId' => 'zammadId',
        'defaultAccount' => 'defaultAccount',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'userIdentifier' => 'userIdentifier',
        'passwordEqual' => 'passwordEqual',
        'completed' => 'completed',
        'name' => 'name',
        'superAdmin' => 'superAdmin',
        'passwordRecoveryTokenExpired' => 'passwordRecoveryTokenExpired',
        'resetPasswordToken' => 'resetPasswordToken',
        'resetPasswordTokenExpiresAt' => 'resetPasswordTokenExpiresAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'company' => 'setCompany',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'repeatPassword' => 'setRepeatPassword',
        'zammadId' => 'setZammadId',
        'defaultAccount' => 'setDefaultAccount',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'userIdentifier' => 'setUserIdentifier',
        'passwordEqual' => 'setPasswordEqual',
        'completed' => 'setCompleted',
        'name' => 'setName',
        'superAdmin' => 'setSuperAdmin',
        'passwordRecoveryTokenExpired' => 'setPasswordRecoveryTokenExpired',
        'resetPasswordToken' => 'setResetPasswordToken',
        'resetPasswordTokenExpiresAt' => 'setResetPasswordTokenExpiresAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'company' => 'getCompany',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'repeatPassword' => 'getRepeatPassword',
        'zammadId' => 'getZammadId',
        'defaultAccount' => 'getDefaultAccount',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'userIdentifier' => 'getUserIdentifier',
        'passwordEqual' => 'getPasswordEqual',
        'completed' => 'getCompleted',
        'name' => 'getName',
        'superAdmin' => 'getSuperAdmin',
        'passwordRecoveryTokenExpired' => 'getPasswordRecoveryTokenExpired',
        'resetPasswordToken' => 'getResetPasswordToken',
        'resetPasswordTokenExpiresAt' => 'getResetPasswordTokenExpiresAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('repeatPassword', $data ?? [], null);
        $this->setIfExists('zammadId', $data ?? [], null);
        $this->setIfExists('defaultAccount', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('userIdentifier', $data ?? [], null);
        $this->setIfExists('passwordEqual', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('superAdmin', $data ?? [], null);
        $this->setIfExists('passwordRecoveryTokenExpired', $data ?? [], null);
        $this->setIfExists('resetPasswordToken', $data ?? [], null);
        $this->setIfExists('resetPasswordTokenExpiresAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ((mb_strlen($this->container['firstName']) > 255)) {
            $invalidProperties[] = "invalid value for 'firstName', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['firstName']) < 2)) {
            $invalidProperties[] = "invalid value for 'firstName', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ((mb_strlen($this->container['lastName']) > 255)) {
            $invalidProperties[] = "invalid value for 'lastName', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['lastName']) < 2)) {
            $invalidProperties[] = "invalid value for 'lastName', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ((mb_strlen($this->container['company']) > 255)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['company']) < 2)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 8)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 8.";
        }

        if (!preg_match("/^(.*[!@#$%^&*()\\-_=+{};:,<.>].*)$/", $this->container['password'])) {
            $invalidProperties[] = "invalid value for 'password', must be conform to the pattern /^(.*[!@#$%^&*()\\-_=+{};:,<.>].*)$/.";
        }

        if ($this->container['repeatPassword'] === null) {
            $invalidProperties[] = "'repeatPassword' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName The firstname of the user
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        if ((mb_strlen($firstName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling User., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($firstName) < 2)) {
            throw new \InvalidArgumentException('invalid length for $firstName when calling User., must be bigger than or equal to 2.');
        }

        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName The lastname of the user
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        if ((mb_strlen($lastName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling User., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($lastName) < 2)) {
            throw new \InvalidArgumentException('invalid length for $lastName when calling User., must be bigger than or equal to 2.');
        }

        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company The company of the user
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company) && (mb_strlen($company) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company when calling User., must be smaller than or equal to 255.');
        }
        if (!is_null($company) && (mb_strlen($company) < 2)) {
            throw new \InvalidArgumentException('invalid length for $company when calling User., must be bigger than or equal to 2.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        if ((mb_strlen($password) < 8)) {
            throw new \InvalidArgumentException('invalid length for $password when calling User., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^(.*[!@#$%^&*()\\-_=+{};:,<.>].*)$/", $password))) {
            throw new \InvalidArgumentException("invalid value for \$password when calling User., must conform to the pattern /^(.*[!@#$%^&*()\\-_=+{};:,<.>].*)$/.");
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets repeatPassword
     *
     * @return string
     */
    public function getRepeatPassword()
    {
        return $this->container['repeatPassword'];
    }

    /**
     * Sets repeatPassword
     *
     * @param string $repeatPassword repeatPassword
     *
     * @return self
     */
    public function setRepeatPassword($repeatPassword)
    {
        if (is_null($repeatPassword)) {
            array_push($this->openAPINullablesSetToNull, 'repeatPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeatPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeatPassword'] = $repeatPassword;

        return $this;
    }

    /**
     * Gets zammadId
     *
     * @return string|null
     */
    public function getZammadId()
    {
        return $this->container['zammadId'];
    }

    /**
     * Sets zammadId
     *
     * @param string|null $zammadId zammadId
     *
     * @return self
     */
    public function setZammadId($zammadId)
    {
        if (is_null($zammadId)) {
            array_push($this->openAPINullablesSetToNull, 'zammadId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zammadId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zammadId'] = $zammadId;

        return $this;
    }

    /**
     * Gets defaultAccount
     *
     * @return string|null
     */
    public function getDefaultAccount()
    {
        return $this->container['defaultAccount'];
    }

    /**
     * Sets defaultAccount
     *
     * @param string|null $defaultAccount defaultAccount
     *
     * @return self
     */
    public function setDefaultAccount($defaultAccount)
    {
        if (is_null($defaultAccount)) {
            array_push($this->openAPINullablesSetToNull, 'defaultAccount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultAccount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultAccount'] = $defaultAccount;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets userIdentifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['userIdentifier'];
    }

    /**
     * Sets userIdentifier
     *
     * @param string|null $userIdentifier userIdentifier
     *
     * @return self
     */
    public function setUserIdentifier($userIdentifier)
    {
        if (is_null($userIdentifier)) {
            throw new \InvalidArgumentException('non-nullable userIdentifier cannot be null');
        }
        $this->container['userIdentifier'] = $userIdentifier;

        return $this;
    }

    /**
     * Gets passwordEqual
     *
     * @return bool|null
     */
    public function getPasswordEqual()
    {
        return $this->container['passwordEqual'];
    }

    /**
     * Sets passwordEqual
     *
     * @param bool|null $passwordEqual passwordEqual
     *
     * @return self
     */
    public function setPasswordEqual($passwordEqual)
    {
        if (is_null($passwordEqual)) {
            throw new \InvalidArgumentException('non-nullable passwordEqual cannot be null');
        }
        $this->container['passwordEqual'] = $passwordEqual;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed completed
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets superAdmin
     *
     * @return bool|null
     */
    public function getSuperAdmin()
    {
        return $this->container['superAdmin'];
    }

    /**
     * Sets superAdmin
     *
     * @param bool|null $superAdmin superAdmin
     *
     * @return self
     */
    public function setSuperAdmin($superAdmin)
    {
        if (is_null($superAdmin)) {
            throw new \InvalidArgumentException('non-nullable superAdmin cannot be null');
        }
        $this->container['superAdmin'] = $superAdmin;

        return $this;
    }

    /**
     * Gets passwordRecoveryTokenExpired
     *
     * @return bool|null
     */
    public function getPasswordRecoveryTokenExpired()
    {
        return $this->container['passwordRecoveryTokenExpired'];
    }

    /**
     * Sets passwordRecoveryTokenExpired
     *
     * @param bool|null $passwordRecoveryTokenExpired passwordRecoveryTokenExpired
     *
     * @return self
     */
    public function setPasswordRecoveryTokenExpired($passwordRecoveryTokenExpired)
    {
        if (is_null($passwordRecoveryTokenExpired)) {
            throw new \InvalidArgumentException('non-nullable passwordRecoveryTokenExpired cannot be null');
        }
        $this->container['passwordRecoveryTokenExpired'] = $passwordRecoveryTokenExpired;

        return $this;
    }

    /**
     * Gets resetPasswordToken
     *
     * @return string|null
     */
    public function getResetPasswordToken()
    {
        return $this->container['resetPasswordToken'];
    }

    /**
     * Sets resetPasswordToken
     *
     * @param string|null $resetPasswordToken resetPasswordToken
     *
     * @return self
     */
    public function setResetPasswordToken($resetPasswordToken)
    {
        if (is_null($resetPasswordToken)) {
            array_push($this->openAPINullablesSetToNull, 'resetPasswordToken');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resetPasswordToken', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resetPasswordToken'] = $resetPasswordToken;

        return $this;
    }

    /**
     * Gets resetPasswordTokenExpiresAt
     *
     * @return \DateTime|null
     */
    public function getResetPasswordTokenExpiresAt()
    {
        return $this->container['resetPasswordTokenExpiresAt'];
    }

    /**
     * Sets resetPasswordTokenExpiresAt
     *
     * @param \DateTime|null $resetPasswordTokenExpiresAt resetPasswordTokenExpiresAt
     *
     * @return self
     */
    public function setResetPasswordTokenExpiresAt($resetPasswordTokenExpiresAt)
    {
        if (is_null($resetPasswordTokenExpiresAt)) {
            array_push($this->openAPINullablesSetToNull, 'resetPasswordTokenExpiresAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resetPasswordTokenExpiresAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resetPasswordTokenExpiresAt'] = $resetPasswordTokenExpiresAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


