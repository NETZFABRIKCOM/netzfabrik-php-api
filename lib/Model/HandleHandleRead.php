<?php
/**
 * HandleHandleRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NETZFABRIK API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@netzfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NETZFABRIK\Model;

use \ArrayAccess;
use \NETZFABRIK\ObjectSerializer;

/**
 * HandleHandleRead Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  NETZFABRIK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HandleHandleRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Handle-handle.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'company' => 'string',
        'address' => 'string',
        'city' => 'string',
        'zipcode' => 'string',
        'countryCode' => 'string',
        'email' => 'string',
        'note' => 'string',
        'phone1' => 'string',
        'phone2' => 'string',
        'phone3' => 'string',
        'fax1' => 'string',
        'fax2' => 'string',
        'fax3' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'firstname' => null,
        'lastname' => null,
        'company' => null,
        'address' => null,
        'city' => null,
        'zipcode' => null,
        'countryCode' => null,
        'email' => null,
        'note' => null,
        'phone1' => null,
        'phone2' => null,
        'phone3' => null,
        'fax1' => null,
        'fax2' => null,
        'fax3' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'firstname' => false,
		'lastname' => false,
		'company' => true,
		'address' => false,
		'city' => false,
		'zipcode' => false,
		'countryCode' => false,
		'email' => false,
		'note' => true,
		'phone1' => false,
		'phone2' => false,
		'phone3' => false,
		'fax1' => true,
		'fax2' => true,
		'fax3' => true,
		'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'company' => 'company',
        'address' => 'address',
        'city' => 'city',
        'zipcode' => 'zipcode',
        'countryCode' => 'countryCode',
        'email' => 'email',
        'note' => 'note',
        'phone1' => 'phone1',
        'phone2' => 'phone2',
        'phone3' => 'phone3',
        'fax1' => 'fax1',
        'fax2' => 'fax2',
        'fax3' => 'fax3',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'company' => 'setCompany',
        'address' => 'setAddress',
        'city' => 'setCity',
        'zipcode' => 'setZipcode',
        'countryCode' => 'setCountryCode',
        'email' => 'setEmail',
        'note' => 'setNote',
        'phone1' => 'setPhone1',
        'phone2' => 'setPhone2',
        'phone3' => 'setPhone3',
        'fax1' => 'setFax1',
        'fax2' => 'setFax2',
        'fax3' => 'setFax3',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'company' => 'getCompany',
        'address' => 'getAddress',
        'city' => 'getCity',
        'zipcode' => 'getZipcode',
        'countryCode' => 'getCountryCode',
        'email' => 'getEmail',
        'note' => 'getNote',
        'phone1' => 'getPhone1',
        'phone2' => 'getPhone2',
        'phone3' => 'getPhone3',
        'fax1' => 'getFax1',
        'fax2' => 'getFax2',
        'fax3' => 'getFax3',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ORG = 'ORG';
    public const TYPE_PERS = 'PERS';
    public const TYPE_ROLE = 'ROLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ORG,
            self::TYPE_PERS,
            self::TYPE_ROLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('phone1', $data ?? [], null);
        $this->setIfExists('phone2', $data ?? [], null);
        $this->setIfExists('phone3', $data ?? [], null);
        $this->setIfExists('fax1', $data ?? [], null);
        $this->setIfExists('fax2', $data ?? [], null);
        $this->setIfExists('fax3', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['phone1']) && !preg_match("/^(\\+\\d{1,3})$/", $this->container['phone1'])) {
            $invalidProperties[] = "invalid value for 'phone1', must be conform to the pattern /^(\\+\\d{1,3})$/.";
        }

        if (!is_null($this->container['phone2']) && !preg_match("/^(\\d{1,5})$/", $this->container['phone2'])) {
            $invalidProperties[] = "invalid value for 'phone2', must be conform to the pattern /^(\\d{1,5})$/.";
        }

        if (!is_null($this->container['phone3']) && !preg_match("/^(\\d{1,15})$/", $this->container['phone3'])) {
            $invalidProperties[] = "invalid value for 'phone3', must be conform to the pattern /^(\\d{1,15})$/.";
        }

        if (!is_null($this->container['fax1']) && !preg_match("/^(\\+\\d{1,3})$/", $this->container['fax1'])) {
            $invalidProperties[] = "invalid value for 'fax1', must be conform to the pattern /^(\\+\\d{1,3})$/.";
        }

        if (!is_null($this->container['fax2']) && !preg_match("/^(\\d{1,5})$/", $this->container['fax2'])) {
            $invalidProperties[] = "invalid value for 'fax2', must be conform to the pattern /^(\\d{1,5})$/.";
        }

        if (!is_null($this->container['fax3']) && !preg_match("/^(\\d{1,15})$/", $this->container['fax3'])) {
            $invalidProperties[] = "invalid value for 'fax3', must be conform to the pattern /^(\\d{1,15})$/.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            throw new \InvalidArgumentException('non-nullable lastname cannot be null');
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode zipcode
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            throw new \InvalidArgumentException('non-nullable zipcode cannot be null');
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode ISO 3166-1 alpha-2 country code
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 The phone prefix, e.g. +49 for Germany
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (is_null($phone1)) {
            throw new \InvalidArgumentException('non-nullable phone1 cannot be null');
        }

        if ((!preg_match("/^(\\+\\d{1,3})$/", $phone1))) {
            throw new \InvalidArgumentException("invalid value for \$phone1 when calling HandleHandleRead., must conform to the pattern /^(\\+\\d{1,3})$/.");
        }

        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 The area code
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (is_null($phone2)) {
            throw new \InvalidArgumentException('non-nullable phone2 cannot be null');
        }

        if ((!preg_match("/^(\\d{1,5})$/", $phone2))) {
            throw new \InvalidArgumentException("invalid value for \$phone2 when calling HandleHandleRead., must conform to the pattern /^(\\d{1,5})$/.");
        }

        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets phone3
     *
     * @return string|null
     */
    public function getPhone3()
    {
        return $this->container['phone3'];
    }

    /**
     * Sets phone3
     *
     * @param string|null $phone3 The phone number
     *
     * @return self
     */
    public function setPhone3($phone3)
    {
        if (is_null($phone3)) {
            throw new \InvalidArgumentException('non-nullable phone3 cannot be null');
        }

        if ((!preg_match("/^(\\d{1,15})$/", $phone3))) {
            throw new \InvalidArgumentException("invalid value for \$phone3 when calling HandleHandleRead., must conform to the pattern /^(\\d{1,15})$/.");
        }

        $this->container['phone3'] = $phone3;

        return $this;
    }

    /**
     * Gets fax1
     *
     * @return string|null
     */
    public function getFax1()
    {
        return $this->container['fax1'];
    }

    /**
     * Sets fax1
     *
     * @param string|null $fax1 The fax prefix, e.g. +49 for Germany
     *
     * @return self
     */
    public function setFax1($fax1)
    {
        if (is_null($fax1)) {
            array_push($this->openAPINullablesSetToNull, 'fax1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($fax1) && (!preg_match("/^(\\+\\d{1,3})$/", $fax1))) {
            throw new \InvalidArgumentException("invalid value for \$fax1 when calling HandleHandleRead., must conform to the pattern /^(\\+\\d{1,3})$/.");
        }

        $this->container['fax1'] = $fax1;

        return $this;
    }

    /**
     * Gets fax2
     *
     * @return string|null
     */
    public function getFax2()
    {
        return $this->container['fax2'];
    }

    /**
     * Sets fax2
     *
     * @param string|null $fax2 The area code
     *
     * @return self
     */
    public function setFax2($fax2)
    {
        if (is_null($fax2)) {
            array_push($this->openAPINullablesSetToNull, 'fax2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($fax2) && (!preg_match("/^(\\d{1,5})$/", $fax2))) {
            throw new \InvalidArgumentException("invalid value for \$fax2 when calling HandleHandleRead., must conform to the pattern /^(\\d{1,5})$/.");
        }

        $this->container['fax2'] = $fax2;

        return $this;
    }

    /**
     * Gets fax3
     *
     * @return string|null
     */
    public function getFax3()
    {
        return $this->container['fax3'];
    }

    /**
     * Sets fax3
     *
     * @param string|null $fax3 The fax number
     *
     * @return self
     */
    public function setFax3($fax3)
    {
        if (is_null($fax3)) {
            array_push($this->openAPINullablesSetToNull, 'fax3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($fax3) && (!preg_match("/^(\\d{1,15})$/", $fax3))) {
            throw new \InvalidArgumentException("invalid value for \$fax3 when calling HandleHandleRead., must conform to the pattern /^(\\d{1,15})$/.");
        }

        $this->container['fax3'] = $fax3;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


